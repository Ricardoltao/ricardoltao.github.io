<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RicardoJiang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-19T11:01:04.034Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ricardo Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日一题</title>
    <link href="http://yoursite.com/2020/02/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2020-02-19T10:59:06.000Z</published>
    <updated>2020-02-19T11:01:04.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端面试每日一题"><a href="#前端面试每日一题" class="headerlink" title="前端面试每日一题"></a>前端面试每日一题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习前端也有一年多了，也算是一个入门小菜了。为了更好的提高自己，每天都要学习一点知识，以面试来驱动学习，每天一道大厂前端面试题。让努力成为一种习惯，让奋斗成为一种享受！一定要坚持，不要半途放弃。</p><blockquote><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/blob/master/datum/summary.md" target="_blank" rel="noopener">题库</a></p></blockquote><h2 id="‘1’-‘2’-‘3’-map-parseInt-what-amp-why-2020-02-18"><a href="#‘1’-‘2’-‘3’-map-parseInt-what-amp-why-2020-02-18" class="headerlink" title="[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ? (2020/02/18)"></a>[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ? (2020/02/18)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>].map(<span class="built_in">parseInt</span>); <span class="comment">//[1, NaN, NaN]</span></span><br></pre></td></tr></table></figure><h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p><code>parseInt()</code> 函数解析一个字符串参数，并返回一个指定基数的整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intValue = <span class="built_in">parseInt</span>(string[, radix]);</span><br></pre></td></tr></table></figure><p><code>string</code> 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。</p><p><code>radix</code> 一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。默认为10。</p><p><code>返回值</code> 返回一个整数或NaN。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">10</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">100</span>, <span class="number">2</span>); <span class="comment">// 4 -&gt; converts 100 in base 2 to base 10</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>在<code>radix</code>为 undefined，或者<code>radix</code>为 0 或者没有指定的情况下，JavaScript 作如下处理：</p><ul><li>如果字符串 string 以”0x”或者”0X”开头, 则基数是16 (16进制).</li><li>如果字符串 string 以”0”开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出radix参数的值。</li><li>如果字符串 string 以其它任何值开头，则基数是10 (十进制)。</li></ul><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">parseInt | MDN</a></p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var new_array = arr.map(function callback(currentValue[,index[, array]]) &#123;</span><br><span class="line"> // Return element for new_array</span><br><span class="line"> &#125;[, thisArg])</span><br></pre></td></tr></table></figure><p>可以看到<code>callback</code>回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。<br><code>currentValue</code> 是callback 数组中正在处理的当前元素。<br><code>index</code>可选, 是callback 数组中正在处理的当前元素的索引。<br><code>array</code>可选, 是callback map 方法被调用的数组。<br>另外还有<code>thisArg</code>可选, 执行 callback 函数时使用的this 值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3];</span><br><span class="line">arr.map((num) =&gt; num + 1); // [2, 3, 4]</span><br></pre></td></tr></table></figure><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.prototype.map() | MDN</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>对于每个迭代<code>map</code>, <code>parseInt()</code>传递两个参数: <strong>字符串和基数</strong>。<br>所以实际执行的的代码是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(item, index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>即返回的值分别为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>, <span class="number">0</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>, <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>, <span class="number">2</span>) <span class="comment">// NaN, 3 不是二进制</span></span><br></pre></td></tr></table></figure><p>所以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="built_in">parseInt</span>)</span><br><span class="line"><span class="comment">// 1, NaN, NaN</span></span><br></pre></td></tr></table></figure><h2 id="什么是防抖和节流？有什么区别？如何实现？-2020-02-19"><a href="#什么是防抖和节流？有什么区别？如何实现？-2020-02-19" class="headerlink" title="什么是防抖和节流？有什么区别？如何实现？(2020/02/19)"></a>什么是防抖和节流？有什么区别？如何实现？(2020/02/19)</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>当调用函数n秒后，才会执行该动作，若在这n秒内又调用该函数则将取消前一次并重新计算执行时间。</p><p><strong>思路</strong>：</p><p>每次触发事件时都取消之前的延时调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">delay, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            cb();</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>函数节流的基本思想是函数预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期。</p><p><strong>思路</strong>：</p><p>每次触发事件时都判断当前是否有等待执行的延时函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canRun = <span class="literal">true</span>; <span class="comment">// 通过闭包保存一个标记</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>; <span class="comment">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class="line">        canRun = <span class="literal">false</span>; <span class="comment">// 立即设置为false</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="comment">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class="line">            canRun = <span class="literal">true</span>;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端面试每日一题&quot;&gt;&lt;a href=&quot;#前端面试每日一题&quot; class=&quot;headerlink&quot; title=&quot;前端面试每日一题&quot;&gt;&lt;/a&gt;前端面试每日一题&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="坚持" scheme="http://yoursite.com/tags/%E5%9D%9A%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>Javascript实现继承的方式</title>
    <link href="http://yoursite.com/2020/02/12/JavaScript/%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2020/02/12/JavaScript/%E7%BB%A7%E6%89%BF/</id>
    <published>2020-02-12T06:33:47.000Z</published>
    <updated>2020-02-18T06:13:44.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript实现继承的方式"><a href="#JavaScript实现继承的方式" class="headerlink" title="JavaScript实现继承的方式"></a>JavaScript实现继承的方式</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于 <code>JavaScript</code> 继承有过认识，但是如果想在脑海中复述一遍，发现对于这一块还是很模糊。所以对于以下 <code>JavaScript</code> 实现继承的方式做一个总结：</p><ul><li>类式继承</li><li>构造函数继承</li><li>组合继承</li><li>寄生组合继承</li><li>extends继承</li></ul><h2 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'animal'</span></span><br><span class="line">  <span class="keyword">this</span>.type = [<span class="string">'pig'</span>,<span class="string">'cat'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明父类的方法</span></span><br><span class="line">Animal.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params">sound</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'dog'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父类</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog()</span><br><span class="line">dog.greet(<span class="string">'汪汪'</span>)  <span class="comment">//汪汪</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.type)  <span class="comment">//[ 'pig', 'cat' ]</span></span><br></pre></td></tr></table></figure><p><strong>原理说明</strong>： 在实例化一个类时，新创建的对象复制了父类构造函数内的属性和方法并且将原型 <code>_proto_</code> 指向了父类的原型对象，这样就拥有了父类的原型对象上的属性与方法。</p><p>但是类式继承有两个缺陷：</p><ol><li><p>引用缺陷</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dog.type.push(<span class="string">'dog'</span>)</span><br><span class="line"><span class="keyword">var</span> dog2 = <span class="keyword">new</span> Dog()</span><br><span class="line"><span class="built_in">console</span>.log(dog2.type) <span class="comment">//[ 'pig', 'cat', 'dog' ]</span></span><br></pre></td></tr></table></figure><p>通过上述执行结果，如果我们通过一个子类实例对象，修改继承自父类的引用对象，另一个新创建的实例对象也会受到影响。</p></li><li><p>无法为不同的实例初始化继承来的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal(<span class="string">'白色'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">console</span>.log(dog.color); <span class="comment">// "白色"</span></span><br><span class="line"><span class="built_in">console</span>.log(do2.color); <span class="comment">// "白色"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><p>构造函数继承可以解决类式继承存在的缺陷</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">  <span class="keyword">this</span>.type = [<span class="string">'pig'</span>,<span class="string">'cat'</span>];</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加共有方法</span></span><br><span class="line">Animal.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params">sound</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sound);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">  Animal.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'白色'</span>);</span><br><span class="line"><span class="keyword">var</span> dog2 = <span class="keyword">new</span> Dog(<span class="string">'黑色'</span>);</span><br><span class="line"></span><br><span class="line">dog.type.push(<span class="string">'dog'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.color);  <span class="comment">// "白色"</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.type);  <span class="comment">// ["pig", "cat", "dog"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog2.type);  <span class="comment">// ["pig", "cat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(dog2.color);  <span class="comment">// "黑色"</span></span><br></pre></td></tr></table></figure><p><strong>原理说明</strong>：调用 <code>apply</code> 方法，更改函数的作用域，在子类中调用这个方法也就是将子类的变量在父类中执行一遍。这样子类就拥有父类的属性和方法。</p><p>但是构造函数继承也有缺陷，那就是我们无法获取父类的公有方法，也就是通过 <code>prototype</code> 绑定的方法。</p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>组合继承就是将类式继承和构造函数继承组合在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类   </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">  <span class="keyword">this</span>.type = [<span class="string">'pig'</span>, <span class="string">'cat'</span>];</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加共有方法  </span></span><br><span class="line">Animal.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params">sound</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sound);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明子类   </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造函数继承    </span></span><br><span class="line">  Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类式继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'白色'</span>);</span><br><span class="line"><span class="keyword">var</span> dog2 = <span class="keyword">new</span> Dog(<span class="string">'黑色'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dog.type.push(<span class="string">'dog'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog.color); <span class="comment">// "白色"</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.type); <span class="comment">// ["pig", "cat", "dog"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog2.type); <span class="comment">// ["pig", "cat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(dog2.color); <span class="comment">// "黑色"</span></span><br><span class="line"></span><br><span class="line">dog.greet(<span class="string">'汪汪'</span>); <span class="comment">// "汪汪"</span></span><br></pre></td></tr></table></figure><p><strong>原理说明</strong>：在上面例子中，我们在子类构造函数中执行父类构造函数，在子类原型上实例化父类，这就是组合继承。可以看到它综合了类式继承和构造函数继承的优点，同时去除了缺陷。</p><p>这种组合继承也是有缺陷的，那就是它调用了两次父类构造函数。</p><h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><p>寄生组合继承强化的部分就是在组合继承的基础上减少一次多余的调用父类的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.color = color;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">  <span class="keyword">this</span>.type = [<span class="string">'pig'</span>, <span class="string">'cat'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.greet = <span class="function"><span class="keyword">function</span>(<span class="params">sound</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sound);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'dog'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意下面两行 */</span></span><br><span class="line">Dog.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line">Dog.prototype.constructor = Dog;</span><br><span class="line"></span><br><span class="line">Dog.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'白色'</span>);   </span><br><span class="line"><span class="keyword">var</span> dog2 = <span class="keyword">new</span> Dog(<span class="string">'黑色'</span>);     </span><br><span class="line"></span><br><span class="line">dog.type.push(<span class="string">'dog'</span>);   </span><br><span class="line"><span class="built_in">console</span>.log(dog.color);   <span class="comment">// "白色"</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.type);   <span class="comment">// ["pig", "cat", "dog"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog2.type);  <span class="comment">// ["pig", "cat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(dog2.color);  <span class="comment">// "黑色"</span></span><br><span class="line"></span><br><span class="line">dog.greet(<span class="string">'汪汪'</span>);  <span class="comment">//  "汪汪"</span></span><br></pre></td></tr></table></figure><p><strong>原理说明</strong>：在上面的例子中，我们并不像类继承一样直接将父类 <code>Animal</code> 的一个实例赋值给 <code>Dog.prototype</code>，而是使用 <code>Object.create()</code> 进行一次浅拷贝，将父类原型上的方法拷贝后赋给 <code>Dog.prototype</code>，这样子类是哪个就能拥有了父类的共有方法，而且少了一次调用父类的构造函数。</p><h2 id="extends-继承"><a href="#extends-继承" class="headerlink" title="extends 继承"></a>extends 继承</h2><p><code>Class</code> 和 <code>extends</code> 是在 ES6 中新增的，class 用来创建一个类， extends 涌来了实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;   </span><br><span class="line">  <span class="keyword">constructor</span>(color) &#123;   </span><br><span class="line">    <span class="keyword">this</span>.color = color;   </span><br><span class="line">  &#125;   </span><br><span class="line">  greet(sound) &#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(sound);   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;   </span><br><span class="line">  <span class="keyword">constructor</span>(color) &#123;   </span><br><span class="line">    <span class="keyword">super</span>(color);   </span><br><span class="line">    <span class="keyword">this</span>.color = color;   </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">'黑色'</span>);  </span><br><span class="line">dog.greet(<span class="string">'汪汪'</span>);  <span class="comment">// "汪汪"</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.color); <span class="comment">// "黑色"</span></span><br></pre></td></tr></table></figure><p>在上面的代码中创建了父类 Animal，然后 Dog 子类继承父类，两个类中都有一个 constructor 构造方法，实质就是构造函数 Animal 和 Dog。其中在子类构造方法中调用了 super 方法，它表示父类的构造函数，用来新建父类的 this 对象。</p><p><em>注意</em>：子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。这就是因为子类没有自己的 this 对象，而是继承父类的 this 对象，然后对其进行加工。如果不调用 super 方法，子类就得不到 this 对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript实现继承的方式&quot;&gt;&lt;a href=&quot;#JavaScript实现继承的方式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript实现继承的方式&quot;&gt;&lt;/a&gt;JavaScript实现继承的方式&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>事件机制</title>
    <link href="http://yoursite.com/2020/01/17/JavaScript/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/01/17/JavaScript/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2020-01-17T03:52:31.000Z</published>
    <updated>2020-02-14T12:59:31.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本节是对事件机制做一些总结，看了一篇文章感觉写的还不错，就稍微总结了一下。</p><h2 id="什么是事件机制"><a href="#什么是事件机制" class="headerlink" title="什么是事件机制"></a>什么是事件机制</h2><p>事件机制就是根据不同的用户操作（如：点击、选择、滚动屏幕等）进行响应变化，这种基于事件的处理方式，本质上是一种消息传递机制。</p><p>事件机制有三样重要的东西：</p><ul><li>事件生产者</li><li>事件对象</li><li>事件消费者</li></ul><h2 id="事件流及事件绑定"><a href="#事件流及事件绑定" class="headerlink" title="事件流及事件绑定"></a>事件流及事件绑定</h2><p>EMCAScript 标准规定事件流包含三个阶段，分别为事件捕获阶段、目标阶段、事件冒泡阶段。<img src="https://user-gold-cdn.xitu.io/2017/12/21/1607805fb19b8e42?imageView2/0/w/1280/h/960/format/webp/Rignore-error/1" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener, useCapture);  </span><br><span class="line">    <span class="comment">// 标准注册事件函数</span></span><br><span class="line">    <span class="comment">// target:文档节点、document、window 或 XMLHttpRequest。</span></span><br><span class="line">    <span class="comment">// 函数的参数：注册事件类型type，事件的回调函数，事件注册在捕获期间还是冒泡期间</span></span><br><span class="line">    <span class="comment">// 例如：给button注册onclick事件，要是在捕获阶段注册，则 button.addEventListener("click",function()&#123;&#125;,true);</span></span><br><span class="line">target.removeEventListener(type, listener, useCapture);  <span class="comment">//在某一个元素上撤销已注册的事件。</span></span><br></pre></td></tr></table></figure><p>上面是标准的事件流，而IE浏览器的事件流却是非标准的。其中只有两个阶段：目标阶段、冒泡阶段。</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/21/1607806e0032e337?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target.attachEvent(type, listener);  <span class="comment">//target： 文档节点、document、window 或 XMLHttpRequest。</span></span><br><span class="line">                                     <span class="comment">//函数参数： type：注册事件类型；</span></span><br><span class="line">                                     <span class="comment">//         listener：事件触发时的回调函数。</span></span><br><span class="line">target.detachEvent(type,listener);   <span class="comment">//参数与注册参数相对应。</span></span><br></pre></td></tr></table></figure><p>然而有时候事件的捕获机制以及冒泡机制也会带来副作用，比如冒泡机制会触发父节点上原本并不希望被触发的监听函数，所以有办法可以使得冒泡提前结束吗？我们只需要在希望事件停止冒泡的位置，调用event对象的 <code>stopPropagation</code> 函数(IE浏览器中为 <code>cancelBubble</code> )即可终止事件冒泡了。</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><h3 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h3><p>事件委托就是利用事件冒泡机制，指定一个事件处理程序，来管理某一类型的所有事件。</p><p>举个例子来说公司员工取快递，为了方便签收快递，有两种方法：一种是快递到了之后收件人亲自去拿快递；另一种是委托前台代为签收，前台按照要求进行签收。很显然第二种更为方便高效，同时这种方案还有一种优势，那就是新员工入职，前台可以代替新员工签收快递。</p><p>这个例子包含了委托的两层意思：</p><p>首先，现公司员工可以委托前台代为签收快递，即程序中现有的dom节点是有事件的并可以进行事件委托；其次，新入职的新员工也可以让前台代签收快递，即程序中新添加的dom节点也是有事件的，并且也能委托处理事件。</p><h3 id="为什么要用事件委托"><a href="#为什么要用事件委托" class="headerlink" title="为什么要用事件委托"></a>为什么要用事件委托</h3><p>当需要给多个节点添加相同的事件时，如果遍历所有节点去添加事件，那就会直接影响页面整体运行性能，因为这需要不停地与dom节点进行交互，访问dom的次数越多，引起浏览器重绘和重排的次数越多，自然会延长页面的交互就绪事件。而如果使用委托，我们可以将事件的操作统一放在js代码里，这样与dom的操作就可以减少到一次，大大减少与dom节点的交互次数提高性能。同时，将事件的操作进行统一管理也能节约内存，因为每个js函数都是一个对象，自然就会占用内存，给dom节点添加的事件处理程序越多，对象越多，占用的内存也就越多；而使用委托，我们就可以只在dom节点的父级添加事件处理程序，那么自然也就节省了很多内存，性能也更好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li id=<span class="string">"item1"</span> &gt;item1&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li id="item2" &gt;item2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li id=<span class="string">"item3"</span> &gt;item3&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> item1 = <span class="built_in">document</span>.getElementById(<span class="string">"item1"</span>);</span><br><span class="line"><span class="keyword">var</span> item2 = <span class="built_in">document</span>.getElementById(<span class="string">"item2"</span>);</span><br><span class="line"><span class="keyword">var</span> item3 = <span class="built_in">document</span>.getElementById(<span class="string">"item3"</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line">list.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> target = event.target;</span><br><span class="line"> <span class="keyword">if</span>(target == item1)&#123;</span><br><span class="line">    alert(event.target.nodeName);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello item1"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target == item2)&#123;</span><br><span class="line">    alert(event.target.nodeName);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello item2"</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target == item3)&#123;</span><br><span class="line">    alert(event.target.nodeName);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello item3"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>添加dom：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li id=<span class="string">"item1"</span> &gt;item1&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li id="item2" &gt;item2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li id=<span class="string">"item3"</span> &gt;item3&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line">  </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = event.target;</span><br><span class="line">    <span class="keyword">if</span>(target.nodeName == <span class="string">"LI"</span>)&#123;</span><br><span class="line">        alert(target.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> node=<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">var</span> textnode=<span class="built_in">document</span>.createTextNode(<span class="string">"item4"</span>);</span><br><span class="line">node.appendChild(textnode);</span><br><span class="line">list.appendChild(node);</span><br><span class="line">  </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件机制&quot;&gt;&lt;a href=&quot;#事件机制&quot; class=&quot;headerlink&quot; title=&quot;事件机制&quot;&gt;&lt;/a&gt;事件机制&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="js事件机制" scheme="http://yoursite.com/tags/js%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    
      <category term="事件流" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://yoursite.com/2020/01/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/01/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-08T12:46:19.000Z</published>
    <updated>2020-01-09T13:09:17.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>存储多个元素，最常用的是数组，访问元素很方便。<br>但是用数组这个数据结构有一个缺点，数组的大小是固定的。意味着对数组中进行添加或删除元素的成本很高，需要移动元素。</p><p>链表同样是存储有序的元素集合，但是不同于数组，链表中的元素在内存中并不是连续存放的。每个元素由一个存储元素本身的节点，和一个指向下一个元素的指针。</p><p>如下图：<br><img src="http://q2e38owot.bkt.clouddn.com/image/study/linked-list.png" alt="linked-list"></p><h2 id="创建链表以及链表的方法"><a href="#创建链表以及链表的方法" class="headerlink" title="创建链表以及链表的方法"></a>创建链表以及链表的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 linkedList 类的开发者可以自行传入用于比较两个 JavaScript 对象或值是否相等的自定义函数</span></span><br><span class="line"><span class="comment">// 如果没有传入这个自定义函数，defaultEquals 函数作为默认的相等性比较函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultEquals</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义每个元素节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(equalsFn = defaultEquals) &#123;</span><br><span class="line">    <span class="keyword">this</span>.equalsFn = equalsFn;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push(element)：向链表尾部添加一个新元素。</span></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element); <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">let</span> current; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">      <span class="keyword">this</span>.head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = <span class="keyword">this</span>.head; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">      <span class="keyword">while</span> (current.next != <span class="literal">null</span>) &#123; <span class="comment">// &#123;5&#125; 获得最后一项</span></span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将其 next 赋为新元素，建立链接</span></span><br><span class="line">      current.next = node; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count++; <span class="comment">// &#123;7&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// removeAt(position)：从链表的特定位置移除一个元素。</span></span><br><span class="line">  removeAt(index) &#123;</span><br><span class="line">    <span class="comment">// 检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.head; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">      <span class="comment">// 移除第一项</span></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.head = current.next;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// let previous; // &#123;4&#125;</span></span><br><span class="line">        <span class="comment">// for (let i = 0; i &lt; index; i++) &#123; // &#123;5&#125;</span></span><br><span class="line">        <span class="comment">//   previous = current; // &#123;6&#125;</span></span><br><span class="line">        <span class="comment">//   current = current.next; // &#123;7&#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">        current = previous.next;</span><br><span class="line">        <span class="comment">// 将 previous 与 current 的下一项链接起来：跳过 current，从而移除它</span></span><br><span class="line">        previous.next = current.next; <span class="comment">// &#123;8&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count--; <span class="comment">// &#123;9&#125;</span></span><br><span class="line">      <span class="keyword">return</span> current.element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// &#123;10&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getElementAt(index)：返回链表中特定位置的元素。如果链表中不存在这样的元素，则返回 undefined。</span></span><br><span class="line">  getElementAt(index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">      <span class="keyword">let</span> node = <span class="keyword">this</span>.head; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; node != <span class="literal">null</span>; i++) &#123; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">        node = node.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// insert(element, position)：向链表的特定位置插入一个新元素。</span></span><br><span class="line">  insert(element, index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; <span class="comment">// 在第一个位置添加</span></span><br><span class="line">        <span class="keyword">const</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        node.next = current; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">        <span class="keyword">this</span>.head = node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>); <span class="comment">// &#123;3&#125;</span></span><br><span class="line">        <span class="keyword">const</span> current = previous.next; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">        node.next = current; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">        previous.next = node; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count++; <span class="comment">// 更新链表的长度</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// &#123;7&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// indexOf(element)：返回元素在链表中的索引。如果链表中没有该元素则返回-1。</span></span><br><span class="line">  indexOf(element) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.count &amp;&amp; current != <span class="literal">null</span>; i++) &#123; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.equalsFn(element, current.element)) &#123; <span class="comment">// &#123;3&#125;验证 current 节点的元素和目标元素是否相等</span></span><br><span class="line">        <span class="keyword">return</span> i; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// remove(element)：从链表中移除一个元素。</span></span><br><span class="line">  remove(element) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.indexOf(element);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// size()：返回链表包含的元素个数，与数组的 length 属性类似。</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// isEmpty()：如果链表中不包含任何元素， 返回 true，如果链表长度大于 0则返回 false。</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getHead() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// toString()：返回表示整个链表的字符串。由于列表项使用了 Node 类，就需要重写继</span></span><br><span class="line">  <span class="comment">// 承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.head.element&#125;</span>`</span>; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head.next; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.size() &amp;&amp; current != <span class="literal">null</span>; i++) &#123; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span>;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从链表中移除元素（removeAt方法）"><a href="#从链表中移除元素（removeAt方法）" class="headerlink" title="从链表中移除元素（removeAt方法）"></a>从链表中移除元素（removeAt方法）</h3><p>对于从链表中移除元素也存在两种场景：第一种是移除第一个元素，第二种是移除第一个元素之外的其他元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">removeAt(index) &#123;</span><br><span class="line">  <span class="comment">// 检查越界值</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="comment">// 移除第一项</span></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">      <span class="keyword">this</span>.head = current.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// let previous; // &#123;4&#125;</span></span><br><span class="line">      <span class="comment">// for (let i = 0; i &lt; index; i++) &#123; // &#123;5&#125;</span></span><br><span class="line">      <span class="comment">//   previous = current; // &#123;6&#125;</span></span><br><span class="line">      <span class="comment">//   current = current.next; // &#123;7&#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">      current = previous.next;</span><br><span class="line">      <span class="comment">// 将 previous 与 current 的下一项链接起来：跳过 current，从而移除它</span></span><br><span class="line">      previous.next = current.next; <span class="comment">// &#123;8&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--; <span class="comment">// &#123;9&#125;</span></span><br><span class="line">    <span class="keyword">return</span> current.element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// &#123;10&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一起来为第一种场景编写代码：我们要从链表中移除第一个元素（ position === 0——行{3}）。</p><p>下图展示了这个过程:<br><img src="http://q2e38owot.bkt.clouddn.com/image/study/removeAt1.png" alt="removeAt1"></p><p>因此，如果想移除第一个元素，要做的就是让 head 指向列表的第二个元素。我们将用 current 变量创建一个对链表中第一个元素的引用（行{2}——我们还会用它来迭代链表，但稍等一下再说）。这样 current 变量就是对链表中第一个元素的引用。如果把 head 赋为 current.next，就会移除第一个元素。我们也可以直接把 head 赋为 head.next（不使用 current 变量作为替代）。</p><p>现在，假设我们要移除链表的最后一个或者中间某个元素。为此，需要迭代链表的节点，直到到达目标位置（行{5}）。一个重要细节是： current 变量总是为对所循环列表的当前元素的引用（行{7}）。我们还需要一个对当前元素的前一个元素的引用（行{6}），它被命名为 previous（行{4}）。</p><p>在迭代到目标位置之后， current 变量会持有我们想从链表中移除的节点。因此，要从链表中移除当前元素，要做的就是将 previous.next 和 current.next 链接起来（行{8}）。这样，当前节点就会被丢弃在计算机内存中，等着被垃圾回收器清除。</p><p>试着借助一些图表来更好地理解这段代码。首先考虑移除最后一个元素。<br><img src="http://q2e38owot.bkt.clouddn.com/image/study/removeAt2.png" alt="removeAt2"><br>对于最后一个元素，当我们在行{8}跳出循环时， current 变量将是对链表中最后一个节点的引用（要移除的节点）。 current.next 的值将是 undefined（因为它是最后一个节点）。由于还保留了对 previous 节点的引用（当前节点的前一个节点）， previous.next 就指向了current。那么要移除 current，要做的就是把 previous.next 的值改变为 current.next。</p><p>对于链表中间的元素:<br><img src="http://q2e38owot.bkt.clouddn.com/image/study/removeAt3.png" alt="removeAt3"><br>current 变量是对要移除节点的引用。 previous 变量是对要移除节点的前一个节点的引用。那么要移除 current 节点，需要做的就是将 previous.next 与 current.next 链接起来。因此，我们的逻辑对这两种情况都适用。</p><h3 id="在任意位置插入元素（insert方法）"><a href="#在任意位置插入元素（insert方法）" class="headerlink" title="在任意位置插入元素（insert方法）"></a>在任意位置插入元素（insert方法）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">insert(element, index) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; <span class="comment">// 在第一个位置添加</span></span><br><span class="line">      <span class="keyword">const</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">      node.next = current; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">      <span class="keyword">this</span>.head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>); <span class="comment">// &#123;3&#125;</span></span><br><span class="line">      <span class="keyword">const</span> current = previous.next; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">      node.next = current; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">      previous.next = node; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count++; <span class="comment">// 更新链表的长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// &#123;7&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果位置合法，我们就要处理不同的场景。第一种场景是需要在链表的起点添加一个元素，也就是第一个位置，如下图所示。<br><img src="http://q2e38owot.bkt.clouddn.com/image/study/insert1.png" alt="insert1"><br>在上图中， current 变量是对链表中第一个元素的引用。我们需要做的是把 node.next 的值设为 current（链表中第一个元素，或简单地设为 head）。现在 head 和 node.next 都指向了 current。接下来要做的就是把 head 的引用改为 node（行{2}），这样链表中就有了一个新元素。</p><p>现在来处理第二种场景：在链表中间或尾部添加一个元素。首先，我们需要迭代链表，找到目标位置（行{3}）。这个时候，我们会循环至 index - 1 的位置，表示需要添加新节点位置的前一个位置。</p><p>当跳出循环时， previous 将是对想要插入新元素的位置之前一个元素的引用， current变量（行{4}）将是我们想要插入新元素的位置之后一个元素的引用。在这种情况下，我们要在 previous 和 current 之间添加新元素。因此，首先需要把新元素（ node）和当前元素链接起来（行{5}），然后需要改变 previous 和 current 之间的链接。我们还需要让 previous.next 指向 node（行{6}），取代 current。</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/insert2.png" alt="insert2"><br>如果试图向最后一个位置添加一个新元素， previous 将是对链表最后一个元素的引用，而current 将是 undefined。在这种情况下， node.next 将指向 current，而 previous.next将指向 node，这样链表中就有了一个新元素。</p><p>现在来看看如何向链表中间添加一个新元素:<br><img src="http://q2e38owot.bkt.clouddn.com/image/study/insert3.png" alt="insert3"><br>在这种情况下，我们试图将新元素（ node）插入 previous 和 current 元素之间。首先，我们需要把 node.next 的值指向 current，然后把 previous.next 的值设为 node。这样列表中就有了一个新元素。</p><hr><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表和普通链表的区别在于，在链表中，一个节点只有链向下一个节点的连接；而双向链表中，连接是双向的：一个链向下一个元素，另一个链向前一个元素。</p><p>如下图所示：</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/DoublyLinkedList.png" alt="双向链表"></p><h3 id="实现代码部分"><a href="#实现代码部分" class="headerlink" title="实现代码部分"></a>实现代码部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">  <span class="keyword">constructor</span>(element, next, prev) &#123;</span><br><span class="line">    <span class="keyword">super</span>(element, next); <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    <span class="keyword">this</span>.prev = prev; <span class="comment">// &#123;3&#125; 新增的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">  <span class="keyword">constructor</span>(equalsFn = defaultEquals) &#123;</span><br><span class="line">    <span class="keyword">super</span>(equalsFn); <span class="comment">// &#123;5&#125;</span></span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="literal">undefined</span>; <span class="comment">// &#123;6&#125; 新增的，保存对链表最后一个元素的引用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DoublyLinkedList 类是一种特殊的 LinkedList 类，所以很多属性和方法可以从 LinkedList 类中继承。</p><p>双向链表提供了两种迭代方法：从头到尾，或者从尾到头。我们也可以访问一个特定节点的下一个或前一个元素。  所以除了 Node 类中的 element 和 next 属性，还需要一个 prev 的属性。</p><h4 id="在任意位置插入新元素"><a href="#在任意位置插入新元素" class="headerlink" title="在任意位置插入新元素"></a>在任意位置插入新元素</h4><p>双向链表需要同时控制 next 和 prev 两个指针。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">insert(element, index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123; <span class="comment">// &#123;1&#125; 新增的,双向链表为空</span></span><br><span class="line">                <span class="keyword">this</span>.head = node;</span><br><span class="line">                <span class="keyword">this</span>.tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// current变量是双向链表中第一个元素的引用</span></span><br><span class="line">                node.next = <span class="keyword">this</span>.head; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">                current.prev = node; <span class="comment">// &#123;3&#125; 新增的，current.prev指针由undefined指向新元素</span></span><br><span class="line">                <span class="keyword">this</span>.head = node; <span class="comment">// &#123;4&#125;将head指向node</span></span><br><span class="line">                <span class="comment">// node.prev指针指向undefined</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.count) &#123; <span class="comment">// 最后一项 // 新增的</span></span><br><span class="line">            current = <span class="keyword">this</span>.tail; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">            current.next = node; <span class="comment">// &#123;6&#125;基于构造函数的缘故，node.next已经指向了undefined</span></span><br><span class="line">            node.prev = current; <span class="comment">// &#123;7&#125;</span></span><br><span class="line">            <span class="keyword">this</span>.tail = node; <span class="comment">// &#123;8&#125;更新tail，由current变为指向node</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>); <span class="comment">// &#123;9&#125;迭代双向链表，直到到要找到的位置</span></span><br><span class="line">            current = previous.next; <span class="comment">// &#123;10&#125;</span></span><br><span class="line">            node.next = current; <span class="comment">// &#123;11&#125;</span></span><br><span class="line">            previous.next = node; <span class="comment">// &#123;12&#125;</span></span><br><span class="line">            current.prev = node; <span class="comment">// &#123;13&#125; 新增的</span></span><br><span class="line">            node.prev = previous; <span class="comment">// &#123;14&#125; 新增的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在双向链表的第一个位置插入第一个新元素：</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/doubly-insert.png" alt=""></p><p>在双向链表最后添加一个新元素：</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/doubly-insert2.png" alt=""></p><p>在双向链表中间插入一个新元素 ：</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/doubly-insert3.png" alt=""></p><h4 id="从任意位置移除元素"><a href="#从任意位置移除元素" class="headerlink" title="从任意位置移除元素"></a>从任意位置移除元素</h4><p>从双向链表中移除元素跟链表非常类似。唯一的区别就是，还需要设置前一个位置的指针。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">removeAt(index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.head = current.next; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">            <span class="comment">// 如果只有一项，更新 tail // 新增的</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.count === <span class="number">1</span>) &#123; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">                <span class="keyword">this</span>.tail = <span class="literal">undefined</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.head.prev = <span class="literal">undefined</span>; <span class="comment">// &#123;3&#125;更新current.next指向上一个元素的指针</span></span><br><span class="line">                <span class="comment">// 因为head也指向双向链表中新的第一个元素，也可以用current.next.prev</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.count - <span class="number">1</span>) &#123; <span class="comment">// 最后一项 //新增的</span></span><br><span class="line">            current = <span class="keyword">this</span>.tail; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">            <span class="keyword">this</span>.tail = current.prev; <span class="comment">// &#123;5&#125;把tail的引用更新为双向链表中倒数第二个元素</span></span><br><span class="line">            <span class="keyword">this</span>.tail.next = <span class="literal">undefined</span>; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = <span class="keyword">this</span>.getElementAt(index); <span class="comment">// &#123;7&#125;</span></span><br><span class="line">            <span class="keyword">const</span> previous = current.prev; <span class="comment">// &#123;8&#125;</span></span><br><span class="line">            <span class="comment">// 将 previous 与 current 的下一项链接起来——跳过 current</span></span><br><span class="line">            previous.next = current.next; <span class="comment">// &#123;9&#125;</span></span><br><span class="line">            current.next.prev = previous; <span class="comment">// &#123;10&#125; 新增的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count--;</span><br><span class="line">        <span class="keyword">return</span> current.element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要处理三种场景：从头部、从中间和从尾部移除一个元素。  </p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/doubly-removeAt.png" alt="移除第一个元素"></p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/doubly-removeAt2.png" alt="移除最后一个元素"></p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/doubly-removeAt3.png" alt="从中间移除一个元素  "></p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>循环链表又分为单向循环链表和双向循环列表。</p><p>循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针（ tail.next）不是引用 undefined，而是指向第一个元素（ head），如下图所示。  </p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/CircularLinkedList1.png" alt=""></p><p>双向循环链表有指向 head 元素的 tail.next 和指向 tail 元素的 head.prev。  </p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/CircularLinkedList2.png" alt=""></p><h3 id="实现代码部分-1"><a href="#实现代码部分-1" class="headerlink" title="实现代码部分"></a>实现代码部分</h3><p>CircularLinkedList 类不需要任何额外的属性，所以直接扩展 LinkedList 类并覆盖需要改写的方法即可。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CircularLinkedList extends LinkedList &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(equalsFn = defaultEquals) &#123;</span><br><span class="line">    <span class="keyword">super</span>(equalsFn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在任意位置插入新元素-1"><a href="#在任意位置插入新元素-1" class="headerlink" title="在任意位置插入新元素"></a>在任意位置插入新元素</h4><p>向循环链表中插入元素的逻辑和向普通链表中插入元素的逻辑是一样的。不同之处在于我们需要将循环链表尾部节点的 next 引用指向头部节点。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">insert(element, index) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = node; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">        node.next = <span class="keyword">this</span>.head; <span class="comment">// &#123;2&#125; 新增的，将最后一个节点链接到 head</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.next = current; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">        current = <span class="keyword">this</span>.getElementAt(<span class="keyword">this</span>.size()); <span class="comment">// &#123;4&#125;</span></span><br><span class="line">        <span class="comment">// 更新最后一个元素</span></span><br><span class="line">        <span class="keyword">this</span>.head = node; <span class="comment">// &#123;5&#125;</span></span><br><span class="line">        current.next = <span class="keyword">this</span>.head; <span class="comment">// &#123;6&#125; 新增的</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 这种场景没有变化</span></span><br><span class="line">      <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">      node.next = previous.next;</span><br><span class="line">      previous.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来分析一下不同的场景。</p><p>在循环链表第一个位置插入新元素  :</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/circular-insert1.png" alt=""></p><p>第二种情况是在一个非空循环链表的第一个位置插入元素：</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/circular-insert2.png" alt=""></p><h4 id="从任意位置移除元素-1"><a href="#从任意位置移除元素-1" class="headerlink" title="从任意位置移除元素"></a>从任意位置移除元素</h4><p>要从循环链表中移除元素，我们只需要考虑第二种情况，也就是修改循环链表的 head 元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">removeAt(index) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.size() === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="literal">undefined</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> removed = <span class="keyword">this</span>.head; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">        current = <span class="keyword">this</span>.getElementAt(<span class="keyword">this</span>.size()); <span class="comment">// &#123;2&#125; 新增的</span></span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">this</span>.head.next; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">        current.next = <span class="keyword">this</span>.head; <span class="comment">// &#123;4&#125;</span></span><br><span class="line">        current = removed; <span class="comment">// &#123;5&#125;更新 current 变量的引用，这样就能返回它</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 不需要修改循环链表最后一个元素</span></span><br><span class="line">      <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">      current = previous.next;</span><br><span class="line">      previous.next = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">return</span> current.element; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个场景是从只有一个元素的循环链表中移除一个元素。 这种情况下，我们只需要将 head<br>赋值为 undefined，和 LinkedList 类中的实现一样。  </p><p>第二种情况是从一个非空循环链表中移除第一个元素。由于 head 的指向会改变，我们需要修改最后一个节点的 next 属性。那么，我们首先保存现在的 head 元素的引用，它将从循环链表中移除（行{1}）。与我们在 insert 方法中所做的一样，同样需要获得循环链表最后一个元素的引用（行{2}），它会被存储在 current 变量中。在取得所有所需节点的引用后，我们可以开始构建新的节点指向了。先更新 head element，将其指向第二个元素（ head.next ——行{3}），然后我们将最后一个 element（ current.next）指向新的 head（行{4}）。我们可以更新 current 变量的引用（行{5}），这样就能返回它（行{6}）来表示移除元素的值。</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/circular-remove.png" alt=""></p><h2 id="有序链表"><a href="#有序链表" class="headerlink" title="有序链表"></a>有序链表</h2><p>有序链表是指保持元素有序的链表结构。除了使用排序算法之外，我们还可以将元素插入到正确的位置来保证链表的有序性。  </p><h3 id="实现代码部分-2"><a href="#实现代码部分-2" class="headerlink" title="实现代码部分"></a>实现代码部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Compare = &#123;</span><br><span class="line">  LESS_THAN: <span class="number">-1</span>,</span><br><span class="line">  BIGGER_THAN: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultCompare</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a &lt; b ? Compare.LESS_THAN : Compare.BIGGER_THAN; <span class="comment">// &#123;2&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortedLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(equalsFn = defaultEquals, compareFn = defaultCompare) &#123;</span><br><span class="line">    <span class="keyword">super</span>(equalsFn);</span><br><span class="line">    <span class="keyword">this</span>.compareFn = compareFn; <span class="comment">// &#123;3&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SortedLinkedList 类会从 LinkedList 类中继承所有的属性和方法，但是由于这个类有特别的行为，我们需要一个用来比较元素的函数。因此，还需要声明 compareFn（行{3}），用来比较元素。该函数会默认使用 defaultCompare。如果元素有相同的引用，它就返回 0（行{1}）。如果第一个元素小于第二个元素，它就返回-1，反之则返回 1。为了保证代码优雅，我们可以声明一个 Compare 常量来表示每个值。如果用于比较的元素更复杂一些，我们可以创建自定义的比较函数并将它传入 SortedLinkedList 类的构造函数中。</p><h4 id="有序插入元素"><a href="#有序插入元素" class="headerlink" title="有序插入元素"></a>有序插入元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">insert(element, index = <span class="number">0</span>) &#123; <span class="comment">// &#123;1&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.insert(element, <span class="number">0</span>); <span class="comment">// &#123;2&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> pos = <span class="keyword">this</span>.getIndexNextSortedElement(element); <span class="comment">// &#123;3&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.insert(element, pos); <span class="comment">// &#123;4&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getIndexNextSortedElement(element) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="keyword">this</span>.size() &amp;&amp; current; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> comp = <span class="keyword">this</span>.compareFn(element, current.element); <span class="comment">// &#123;5&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (comp === Compare.LESS_THAN) &#123; <span class="comment">// &#123;6&#125;</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i; <span class="comment">// &#123;7&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本章介绍了链表这种数据结构，以及其变体：双向链表、循环链表和有序链表。你学习了如何在任意位置添加和移除元素，以及如何循环访问链表。你还学习了链表相比数组最重要的优点，那就是无须移动链表中的元素，就能轻松地添加和移除元素。因此，当你需要添加和移除很多元素时，最好的选择就是链表，而非数组。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;存储多个元素，最常用的是数组，访问元素很方便。&lt;br&gt;但是用数组这个数据结构有一个缺点，数组的大小是固定的。意味着对数组中进行添加或删除元素
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="双向链表" scheme="http://yoursite.com/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
      <category term="循环链表" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    
      <category term="有序链表" scheme="http://yoursite.com/tags/%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://yoursite.com/2020/01/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97%E5%92%8C%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2020/01/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97%E5%92%8C%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-01-07T07:07:07.000Z</published>
    <updated>2020-01-09T13:10:55.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列和双端队列"><a href="#队列和双端队列" class="headerlink" title="队列和双端队列"></a>队列和双端队列</h1><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>我们可以像栈那样使用数组来储存队列中元素的数据结构，但用对象的方式，更高效。<br>关于用对象来存储，和栈一样。但队列遵循先进先出的原则，从队列前端移除元素，所以需要一个变量来追踪第一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建队列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(element(s))：向队列尾部添加一个（或多个）新的项。</span></span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element</span><br><span class="line">    <span class="keyword">this</span>.count++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dequeue()：移除队列的第一项（即排在队列最前面的项）并返回被移除的元素。</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">this</span>.lowestCount++;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// peek()：返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做</span></span><br><span class="line">  <span class="comment">// 任何变动（不移除元素，只返回元素信息——与 Stack 类的 peek 方法非常类似）。该方</span></span><br><span class="line">  <span class="comment">// 法在其他语言中也可以叫作 front 方法。</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// isEmpty()：如果队列中不包含任何元素，返回 true，否则返回 false。</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// size()：返回队列包含的元素个数，与数组的 length 属性类似。</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清空队列</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.lowestCount + <span class="number">1</span>; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Queue类</span></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty());   <span class="comment">//输出 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队列中添加元素</span></span><br><span class="line">queue.enqueue(<span class="string">'John'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.toString());  <span class="comment">//输出 John,Bob</span></span><br><span class="line"></span><br><span class="line">queue.enqueue(<span class="string">'Jack'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.toString());  <span class="comment">//输出 John,Bob,Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size());    <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty());   <span class="comment">//输出 false</span></span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line"><span class="built_in">console</span>.log(queue.toString());  <span class="comment">//输出 Jack</span></span><br></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>双端队列有所不同的是，它允许在前端和后端进行添加和删除元素的操作。<br>双端队列常见应用是存储一系列撤销操作，双端队列同时遵循先进先出和后进先出的原则，把栈和队列同时结合的数据结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由于双端队列是特殊的队列，有一些方法是相同的，如：isEmpty、clear、size、toString</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.lowestCount + <span class="number">1</span>; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// addFront(element)：该方法在双端队列前端添加新的元素。考虑三种情况</span></span><br><span class="line">  addFront(element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">this</span>.addBack(element)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lowestCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.lowestCount--</span><br><span class="line">      <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount] = element</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.count; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.items[i] = <span class="keyword">this</span>.items[i - <span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count++</span><br><span class="line">      <span class="keyword">this</span>.lowestCount = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.items[<span class="number">0</span>] = element</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// addBack(element)：该方法在双端队列后端添加新的元素（实现方法和 Queue 类中的enqueue 方法相同）。</span></span><br><span class="line">  addBack(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element</span><br><span class="line">    <span class="keyword">this</span>.count++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// removeFront()：该方法会从双端队列前端移除第一个元素（实现方法和 Queue 类中的 dequeue 方法相同）。</span></span><br><span class="line">  removeFront() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">this</span>.lowestCount++;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// removeBack()：该方法会从双端队列后端移除第一个元素（实现方法和 Stack 类中的 pop 方法一样）。</span></span><br><span class="line">  removeBack() &#123;</span><br><span class="line">    <span class="comment">// 判断栈是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// peekFront()：该方法返回双端队列前端的第一个元素（实现方法和 Queue 类中的 peek 方法一样）。</span></span><br><span class="line">  peekFront() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// peekBack()：该方法返回双端队列后端的第一个元素（实现方法和 Stack 类中的 peek 方法一样）。</span></span><br><span class="line">  peekBack() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 Deque 类 */</span></span><br><span class="line"><span class="keyword">const</span> deque=<span class="keyword">new</span> Deque()</span><br><span class="line"><span class="built_in">console</span>.log(deque.isEmpty());  <span class="comment">//true</span></span><br><span class="line">deque.addBack(<span class="string">'Jack'</span>)</span><br><span class="line">deque.addBack(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(deque.toString());<span class="comment">//Jack,Bob</span></span><br><span class="line">deque.addBack(<span class="string">'Ricardo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(deque.size());<span class="comment">//3</span></span><br><span class="line">deque.removeFront()</span><br><span class="line"><span class="built_in">console</span>.log(deque.toString());<span class="comment">//Bob,Ricardo</span></span><br><span class="line">deque.removeBack()</span><br><span class="line"><span class="built_in">console</span>.log(deque.toString());<span class="comment">//Bob</span></span><br><span class="line">deque.addFront(<span class="string">'Jack'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(deque.toString());<span class="comment">//Jack,Bob</span></span><br></pre></td></tr></table></figure><h2 id="使用队列和双端队列来解决问题"><a href="#使用队列和双端队列来解决问题" class="headerlink" title="使用队列和双端队列来解决问题"></a>使用队列和双端队列来解决问题</h2><h3 id="循环队列—-击鼓传花（使用-Queue-类）"><a href="#循环队列—-击鼓传花（使用-Queue-类）" class="headerlink" title="循环队列—-击鼓传花（使用 Queue 类）"></a>循环队列—-击鼓传花（使用 Queue 类）</h3><p>循环队列的一个例子就是击鼓传花游戏（ hotpotato）。在这个游戏中，孩子们围成一个圆圈，把花尽快地传递给旁边的人。某一时刻传花停止，这个时候花在谁手里，谁就退出圆圈、结束游戏。重复这个过程，直到只剩一个孩子（胜者）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">elementList, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">  <span class="keyword">const</span> eliminatedList = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementList.length; i++) &#123;</span><br><span class="line">    queue.enqueue(elementList[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      queue.enqueue(queue.dequeue())</span><br><span class="line">    &#125;</span><br><span class="line">    eliminatedList.push(queue.dequeue())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    eliminated: eliminatedList,</span><br><span class="line">    winner: queue.dequeue()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">'John'</span>, <span class="string">'Jack'</span>, <span class="string">'Camila'</span>, <span class="string">'Ingrid'</span>, <span class="string">'Carl'</span>];</span><br><span class="line"><span class="keyword">const</span> result = hotPotato(names, <span class="number">7</span>);</span><br><span class="line">result.eliminated.forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>在击鼓传花游戏中被淘汰。 `</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`胜利者： <span class="subst">$&#123;result.winner&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// Camila在击鼓传花游戏中被淘汰。</span></span><br><span class="line"><span class="comment">// Jack在击鼓传花游戏中被淘汰。</span></span><br><span class="line"><span class="comment">// Carl在击鼓传花游戏中被淘汰。</span></span><br><span class="line"><span class="comment">// Ingrid在击鼓传花游戏中被淘汰。</span></span><br><span class="line"><span class="comment">// 胜利者： John</span></span><br></pre></td></tr></table></figure><h3 id="回文检查器（使用-Deque-类）"><a href="#回文检查器（使用-Deque-类）" class="headerlink" title="回文检查器（使用 Deque 类）"></a>回文检查器（使用 Deque 类）</h3><p>回文是正反都能读通的单词、词组、数或一系列字符的序列，例如 madam 或 racecar。有不同的算法可以检查一个词组或字符串是否为回文。最简单的方式是将字符串反向排列并检查它和原字符串是否相同。如果两者相同，那么它就是一个回文。我们也可以用栈来完成，但是利用数据结构来解决这个问题的最简单方法是使用双端队列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindromeChecker</span>(<span class="params">aString</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 检查传入的字符串参数是否合法</span></span><br><span class="line">  <span class="keyword">if</span> (aString === <span class="literal">undefined</span> || aString === <span class="literal">null</span> || (aString !== <span class="literal">null</span> &amp;&amp; aString.length === <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> deque = <span class="keyword">new</span> Deque();</span><br><span class="line">  <span class="comment">// 将所有字母转化为小写，同时移除所有的空格</span></span><br><span class="line">  <span class="keyword">const</span> lowerString = aString.toLocaleLowerCase().split(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> isEqual = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> firstChar, lastChar;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lowerString.length; i++) &#123;</span><br><span class="line">    deque.addBack(lowerString.charAt(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (deque.size() &gt; <span class="number">1</span> &amp;&amp; isEqual) &#123;</span><br><span class="line">    firstChar = deque.removeFront();</span><br><span class="line">    lastChar = deque.removeBack();</span><br><span class="line">    <span class="keyword">if</span> (firstChar !== lastChar) &#123;</span><br><span class="line">      isEqual = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isEqual;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>, palindromeChecker(<span class="string">'a'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'aa'</span>, palindromeChecker(<span class="string">'aa'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'kayak'</span>, palindromeChecker(<span class="string">'kayak'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'level'</span>, palindromeChecker(<span class="string">'level'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Was it a car or a cat I saw'</span>, palindromeChecker(<span class="string">'Was it a caror a cat I saw'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Step on no pets'</span>, palindromeChecker(<span class="string">'Step on no pets'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;队列和双端队列&quot;&gt;&lt;a href=&quot;#队列和双端队列&quot; class=&quot;headerlink&quot; title=&quot;队列和双端队列&quot;&gt;&lt;/a&gt;队列和双端队列&lt;/h1&gt;&lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="双端队列" scheme="http://yoursite.com/tags/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="击鼓传花" scheme="http://yoursite.com/tags/%E5%87%BB%E9%BC%93%E4%BC%A0%E8%8A%B1/"/>
    
      <category term="回文检查器" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E6%A3%80%E6%9F%A5%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://yoursite.com/2019/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/"/>
    <id>http://yoursite.com/2019/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%88/</id>
    <published>2019-12-28T02:38:52.000Z</published>
    <updated>2019-12-28T02:41:38.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>我们了解到，可以在数组的任意位置进行添加或者删除元素，但是如果想在添加和删除元素时进行更多的操作，还提供了两种类似数组的数据结构：栈和队列</p><h2 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h2><p>栈是遵循后进先出（LIFO）原则的有序集合</p><h3 id="创建一个基于数组的栈"><a href="#创建一个基于数组的栈" class="headerlink" title="创建一个基于数组的栈"></a>创建一个基于数组的栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个类来表示栈，声明一个Stack类,并定义栈的一些方法方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 声明一个数组来保存栈内元素</span></span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push(element(s))：添加一个（或几个）新元素到栈顶</span></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// pop()：移除栈顶的元素，同时返回被移除的元素。</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// peek()： 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素， 仅仅返回它）。</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// isEmpty()：如果栈里没有任何元素就返回 true，否则返回 false。</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// clear()：移除栈里的所有元素。</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// size()：返回栈里的元素个数。该方法和数组的 length 属性很类似。</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">stack.push(<span class="number">5</span>)</span><br><span class="line">stack.push(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stack.peek());  <span class="comment">//8</span></span><br><span class="line"></span><br><span class="line">stack.push(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stack.size());  <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="创建一个基于对象的栈"><a href="#创建一个基于对象的栈" class="headerlink" title="创建一个基于对象的栈"></a>创建一个基于对象的栈</h3><p>用数组创建的栈，有以下缺点：</p><ul><li>大多数方法的时间复制度为 O(n)，意思是我们需要迭代整个数组，直到找到要找的那个元素，耗时</li><li>数组是一个有序集合，为了保证元素排列有序，它会占用更多的内存空间，耗空间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// count 记录栈的大小</span></span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="comment">// 判断栈是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.items[<span class="number">0</span>]&#125;</span>`</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="keyword">this</span>.count;i++)&#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.items[i]&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用栈解决问题"><a href="#用栈解决问题" class="headerlink" title="用栈解决问题"></a>用栈解决问题</h2><h3 id="用于解决十进制转二进制"><a href="#用于解决十进制转二进制" class="headerlink" title="用于解决十进制转二进制"></a>用于解决十进制转二进制</h3><p>思路：</p><ul><li>声明一个循环，将十进制除二的余数放入栈中</li><li>声明另一个循环，将存入栈的余数弹出，并转换为 String 类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decimalToBinary</span>(<span class="params">decNumber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> remStack = <span class="keyword">new</span> Stack()</span><br><span class="line">  <span class="keyword">let</span> rem;</span><br><span class="line">  <span class="keyword">let</span> number = decNumber</span><br><span class="line">  <span class="keyword">let</span> binaryString = <span class="string">''</span></span><br><span class="line">  <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(number % <span class="number">2</span>)</span><br><span class="line">    remStack.push(rem)</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(!remStack.isEmpty())&#123;</span><br><span class="line">    binaryString += remStack.pop().toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(decimalToBinary(<span class="number">233</span>)); <span class="comment">//11101001</span></span><br><span class="line"><span class="built_in">console</span>.log(decimalToBinary(<span class="number">10</span>));  <span class="comment">//1010</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;我们了解到，可以在数组的任意位置进行添加或者删除元素，但是如果想在添加和删除元素时进行更多的操作，还提供了两种类似数组的数据结构：栈和队列&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
      <category term="十进制转二进制" scheme="http://yoursite.com/tags/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>数组降维</title>
    <link href="http://yoursite.com/2019/12/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E7%BB%84%E9%99%8D%E7%BB%B4/"/>
    <id>http://yoursite.com/2019/12/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E7%BB%84%E9%99%8D%E7%BB%B4/</id>
    <published>2019-12-24T07:24:23.000Z</published>
    <updated>2019-12-28T02:44:46.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h1><h2 id="二维数组降一维数组"><a href="#二维数组降一维数组" class="headerlink" title="二维数组降一维数组"></a>二维数组降一维数组</h2><p>以 <code>var oldArr=[1, 2, [3, 4]];</code> 为例：</p><ul><li><p>reduce() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = oldArr.reduce(<span class="function">(<span class="params">accu,curr</span>)=&gt;</span>&#123;<span class="keyword">return</span> prev.concat(curr)&#125;,[])</span><br></pre></td></tr></table></figure></li><li><p>concat() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = [].concat(...oldArr)</span><br><span class="line"><span class="keyword">var</span> newArr2 = <span class="built_in">Array</span>.prototype.concat.apply([],oldArr)</span><br></pre></td></tr></table></figure></li><li><p>flat() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = oldArr.flat()</span><br></pre></td></tr></table></figure></li></ul><h2 id="多维降一维"><a href="#多维降一维" class="headerlink" title="多维降一维"></a>多维降一维</h2><h3 id="递归降维"><a href="#递归降维" class="headerlink" title="递归降维"></a>递归降维</h3><p>递归降维这里有两种方法：</p><ol><li><code>forEach</code> 递归</li><li><code>reduce</code> 递归</li></ol><p>举例：</p><ul><li><p>forEach递归降维</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldArr = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],<span class="number">10</span>,<span class="number">11</span>,],<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,[<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ergodic = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//判断是否是数组，是就递归到深层    </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">      ergodic(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ergodic(oldArr, newArr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ]</span></span><br></pre></td></tr></table></figure></li><li><p>reduce 递归降维</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldArr = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],<span class="number">10</span>,<span class="number">11</span>,],<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,[<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ergodic = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">prev, curr, index, list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(curr)) &#123;</span><br><span class="line">    <span class="keyword">return</span> prev.concat(...ergodic(curr));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev.concat(curr);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = ergodic(oldArr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="flat-降维"><a href="#flat-降维" class="headerlink" title="flat() 降维"></a>flat() 降维</h3><p>flat(depth) depth这个参数默认是一层，可以填写数字按照查找层次，如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组：默认拉平一层</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>]]].flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, [5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四维数组：设置拉平两层</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]]]].flat(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, [6, 7]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置拉平所有层</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>]]].flat(<span class="literal">Infinity</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组降维&quot;&gt;&lt;a href=&quot;#数组降维&quot; class=&quot;headerlink&quot; title=&quot;数组降维&quot;&gt;&lt;/a&gt;数组降维&lt;/h1&gt;&lt;h2 id=&quot;二维数组降一维数组&quot;&gt;&lt;a href=&quot;#二维数组降一维数组&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://yoursite.com/2019/12/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2019/12/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/</id>
    <published>2019-12-18T13:00:27.000Z</published>
    <updated>2019-12-28T02:40:30.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>根据书上内容,对于数组的一些方法做了一些总结</p><h2 id="JavaScript-的数组方法参考"><a href="#JavaScript-的数组方法参考" class="headerlink" title="JavaScript 的数组方法参考"></a>JavaScript 的数组方法参考</h2><table><thead><tr><th>方 法</th><th>描 述</th></tr></thead><tbody><tr><td>concat</td><td>连接 2 个或更多数组，并返回结果</td></tr><tr><td>every</td><td>对数组中的每个元素运行给定函数，如果该函数对每个元素都返回 true，则返回 true</td></tr><tr><td>some</td><td>对数组中的每个元素运行给定函数，如果任一元素返回 true，则返回 true</td></tr><tr><td>forEach</td><td>对数组中的每个元素运行给定函数。这个方法没有返回值</td></tr><tr><td>map</td><td>对数组中的每个元素运行给定函数，返回每次函数调用的结果组成的数组</td></tr><tr><td>filter</td><td>对数组中的每个元素运行给定函数，返回该函数会返回 true 的元素组成的数组</td></tr><tr><td>join</td><td>将所有的数组元素连接成一个字符串</td></tr><tr><td>indexOf</td><td>返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1</td></tr><tr><td>lastIndexOf</td><td>返回在数组中搜索到的与给定参数相等的元素的索引里最大的值</td></tr><tr><td>reverse</td><td>颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个</td></tr><tr><td>slice</td><td>传入索引值，将数组里对应索引范围内的元素作为新数组返回</td></tr><tr><td>sort</td><td>按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数</td></tr><tr><td>toString</td><td>将数组作为字符串返回</td></tr><tr><td>valueOf</td><td>和 toString 类似，将数组作为字符串返回</td></tr></tbody></table><h3 id="迭代器函数"><a href="#迭代器函数" class="headerlink" title="迭代器函数"></a>迭代器函数</h3><p>JavaScript 内置了许多数组可用的迭代方法。我们需要一个数组和一个函数：假设数组中的值是从 1 到 15；如果数组里的元素可以被 2 整除（偶数），函数就返回 true，否则返回 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果x是2的倍数，就返回true</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>];</span><br></pre></td></tr></table></figure><ol><li>用 every 方法迭代<br>every 方法会迭代数组中的每个元素，直到返回 false。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.every(isEven);</span><br></pre></td></tr></table></figure>在这个例子里，数组 numbers 的第一个元素是 1， 它不是 2 的倍数（ 1 是奇数）， 因此 isEven函数返回 false，然后 every 执行结束。</li></ol><h2 id="ECMAScript6-和数组的新功能"><a href="#ECMAScript6-和数组的新功能" class="headerlink" title="ECMAScript6 和数组的新功能"></a>ECMAScript6 和数组的新功能</h2><p>下表列出了 ES2015 和 ES2016 新增的数组方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>@@iterator</td><td>返回一个包含数组键值对的迭代器对象，可以通过同步调用得到数组元素的键值对</td></tr><tr><td>copyWithin</td><td>复制数组中一系列元素到同一数组指定的起始位置</td></tr><tr><td>entries</td><td>返回包含数组所有键值对的@@iterator</td></tr><tr><td>includes</td><td>如果数组中存在某个元素则返回 true，否则返回 false。 E2016 新增</td></tr><tr><td>find</td><td>根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素</td></tr><tr><td>findIndex</td><td>根据回调函数给定的条件从数组中查找元素，如果找到则返回该元素在数组中的索引</td></tr><tr><td>fill</td><td>用静态值填充数组</td></tr><tr><td>from</td><td>根据已有数组创建一个新数组</td></tr><tr><td>keys</td><td>返回包含数组所有索引的@@iterator</td></tr><tr><td>of</td><td>根据传入的参数创建一个新数组</td></tr><tr><td>values</td><td>返回包含数组中所有值的@@iterator</td></tr></tbody></table><h3 id="使用-iterator-对象"><a href="#使用-iterator-对象" class="headerlink" title="使用 @@iterator 对象"></a>使用 @@iterator 对象</h3><p>ES2015 还为 Array 类增加了一个@@iterator 属性，需要通过 Symbol.iterator 来访问。代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = numbers[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>然后，不断调用迭代器的 next 方法，就能依次得到数组中的值。 numbers 数组中有 15 个值，因此需要调用 15 次 iterator.next().value。</p><p>我们可以用下面的代码来输出 numbers 数组中的 15 个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iterator = numbers[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> iterator) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组中的所有值都迭代完之后， iterator.next().value 会返回 undefined。</p><h3 id="数组的-entries、keys和values方法"><a href="#数组的-entries、keys和values方法" class="headerlink" title="数组的 entries、keys和values方法"></a>数组的 entries、keys和values方法</h3><p>entries 方法返回包含键值对的 @@iterator,使用集合、字典、散列表等数据结构时，能够取出键值对是很有用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aEntries = numbers.entries(); <span class="comment">// 得到键值对的迭代器</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries.next().value); <span class="comment">// [0, 1] - 位置 0 的值为 1</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries.next().value); <span class="comment">// [1, 2] - 位置 1 的值为 2</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries.next().value); <span class="comment">// [2, 3] - 位置 2 的值为 3</span></span><br></pre></td></tr></table></figure><p>keys 方法返回包含数组索引的 @@iterator,values 方法返回的 @@iterator 则包含数组的值</p><h2 id="fafa"><a href="#fafa" class="headerlink" title="fafa"></a>fafa</h2><p><strong>使用数组实现斐波拉契数列</strong><br>求斐波拉契数列的前 20 个数。已知斐波那契数列中的前两项是 1，从第三项开始，每一项都等于前两项之和。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = []</span><br><span class="line">fibonacci[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">fibonacci[<span class="number">2</span>]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">3</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">  fibonacci[i]=fibonacci[i<span class="number">-1</span>]+fibonacci[i<span class="number">-2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;fibonacci.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fibonacci[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;根据书上内容,对于数组的一些方法做了一些总结&lt;/p&gt;
&lt;h2 id=&quot;JavaScript-的数组方法参考&quot;&gt;&lt;a href=&quot;#JavaS
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>ES6复习(二)</title>
    <link href="http://yoursite.com/2019/12/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ES6%E5%A4%8D%E4%B9%A0%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/12/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ES6%E5%A4%8D%E4%B9%A0%E4%BA%8C/</id>
    <published>2019-12-15T10:20:15.000Z</published>
    <updated>2019-12-19T02:09:17.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6复习"><a href="#ES6复习" class="headerlink" title="ES6复习"></a>ES6复习</h1><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>Generator 函数是 ES6 提供的一种异步解决方案，语法行为与传统的函数不同。</p><p>语法上，可以将 Generator 函数理解成一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，也就是说它也是一个遍历器对象生成函数。返回遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p><p>形式上，Generator函数是一个普通的函数，有两个特征需要注意，</p><ol><li><code>function</code> 关键字与函数之间有一个星号</li><li>函数内部使用 <code>yield</code> 表达式，定义不同的内部状态</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br></pre></td></tr></table></figure><p>其中调用 Generator 函数后，函数并不执行，返回的也不是函数运行的结果，而是一个指向内部状态的指针对象，也就是遍历器对象（Iterator Object）。<br>所以是对返回的遍历器对象进行操作，所以要调用遍历器对象的 <code>next</code> 方法。Generator 函数是分段执行的，<code>yield</code> 表达式是暂停执行的标记，而 <code>next</code> 方法可以恢复执行。</p><p><code>for...of</code> 可以自动遍历 Generator 函数运行时生成的 Itearator 对象，且此时不再需要 <code>next</code> 方法。</p><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>async 函数就是 Generator 函数的语法糖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fileName, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> reject(error);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/fstab'</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/shells'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码的函数gen可以写成async函数，就是下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> readFile(<span class="string">'/etc/fstab'</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> readFile(<span class="string">'/etc/shells'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p><p>具体文章还是看阮老师的 ES6标准入门，讲的比较清楚。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6复习&quot;&gt;&lt;a href=&quot;#ES6复习&quot; class=&quot;headerlink&quot; title=&quot;ES6复习&quot;&gt;&lt;/a&gt;ES6复习&lt;/h1&gt;&lt;h2 id=&quot;Generator&quot;&gt;&lt;a href=&quot;#Generator&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="复习笔记" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES6复习(一)</title>
    <link href="http://yoursite.com/2019/12/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ES6%E5%A4%8D%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/12/14/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ES6%E5%A4%8D%E4%B9%A0/</id>
    <published>2019-12-14T08:10:14.000Z</published>
    <updated>2019-12-18T14:03:06.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6复习（Promise、Iterator）"><a href="#ES6复习（Promise、Iterator）" class="headerlink" title="ES6复习（Promise、Iterator）"></a>ES6复习（Promise、Iterator）</h1><p>参照阮老师的 ECMAScript 标准入门</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Promise 是一个对象，可以将异步操作以同步操作的流程表达出来，解决<em>回调地狱</em> 的层层嵌套。</p><p>其中包含三个状态：</p><ul><li>pending（进行中）</li><li>fulfilled（已成功）</li><li>rejected（已失败）</li></ul><p><code>Promise</code> 的状态改变只有两种：pending =&gt; fulfilled，pending =&gt; rejected。其中状态一旦改变，状态就凝固了，不会再改变，会一直保持这个结果，这时就称为 resolved（已定型）。</p><p>缺点：第一是无法取消，一旦新建就会立即执行，无法中途取消。第二是不设置回调函数会抛出错误。第三是当处于 <code>pending</code> 状态时，无法知道目前到哪一个阶段。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中函数里有两个 <code>resolve</code> 和 <code>reject</code> 函数，由 JavaScript 引擎提供。</p><p><code>resolve</code> 的作用是将 <code>Promise</code> 的状态从 pending =&gt; fulfilled，在异步操作成功后调用，并将异步操作的结果作为参数返回出去。<code>reject</code> 的作用是将 <code>Promise</code> 的状态从 pending =&gt; rejected，在异步操作失败时调用，并将异步操作报出的错误作为参数传递出去。</p><p><code>Promise</code>实例生成以后，可以用<code>then</code>方法分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是<code>Promise</code>对象的状态变为<code>resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受<code>Promise</code>对象传出的值作为参数。</p><h2 id="Iterator（遍历器）"><a href="#Iterator（遍历器）" class="headerlink" title="Iterator（遍历器）"></a>Iterator（遍历器）</h2><p>Iterator 是一种统一接口，为不同数据结构提供统一的访问机制。任何数据结构只要部署了 Iterator 接口，就可以完成遍历操作，即依次处理该数据结构中的所有成员。Iterator 遍历对象是一个指针对象，其中包含 next 方法，指向下一个数据结构的成员。返回包含 value 和 done 两种属性的对象， value 是当前成员的值，done 是一个布尔值，表示遍历是否结束。</p><p>JavaScript表示 “集合” 的数据结构有：</p><ul><li>数组</li><li>对象</li><li>ES6 新增的 Set、Map</li></ul><p>Iterator 的作用</p><ol><li>为各种数据结构提供统一的、简单的访问接口</li><li>使得数据结构的成员能够按照某种次序排列</li><li>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费</li></ol><p>ES6 的一些数据原生具备 Iterator 接口（比如数组），即不用任何处理就可以被 for…of 处理，因为这些数据结构原生部署了 <code>Symbol.iterator</code>，其他数据结构（主要是对象）的 Iterator 接口，都需要自己在  <code>Symbol.iterator</code> 属性上面部署，这样才会被<code>for...of</code>循环遍历。对象之所以没有默认部署 Iterator 接口，是因为对象中的数据是非线性的。</p><p>原生具备 Iterator 接口的数据结构如下：</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6复习（Promise、Iterator）&quot;&gt;&lt;a href=&quot;#ES6复习（Promise、Iterator）&quot; class=&quot;headerlink&quot; title=&quot;ES6复习（Promise、Iterator）&quot;&gt;&lt;/a&gt;ES6复习（Promise、Ite
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="复习笔记" scheme="http://yoursite.com/tags/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo写作命令大全</title>
    <link href="http://yoursite.com/2019/12/12/Hexo%E5%86%99%E4%BD%9C%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2019/12/12/Hexo%E5%86%99%E4%BD%9C%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2019-12-12T08:27:54.000Z</published>
    <updated>2019-12-12T12:01:09.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo写作命令大全"><a href="#Hexo写作命令大全" class="headerlink" title="Hexo写作命令大全"></a>Hexo写作命令大全</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名前端程序员当然要有自己的博客存，以前用 markdown 写一些自己的学习笔记，但是写完之后都不会去回顾，因为存放在电脑上回顾起来比较麻烦。所以最近在着手自己的博客项目，但是对于 hexo 的一些写作命令并不是很熟悉，所以在网上找到了一些牛人前辈写的博客，下面开始练练手吧。</p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>在博客目录下执行如下命令新建一篇文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure><p>如果未指定文章的布局（layout），则默认使用 <code>post</code> 布局，生成的文档存放于 <code>source\_posts\</code> 目录下，打开后使用 Markdown 语法进行写作，保存后刷新浏览器即可看到文章。</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>布局可以理解为新建文档时的一个模块，基于布局生成的文档将会继承布局的样式。</p><p>Hexo 默认有三种布局：<code>post</code>、 <code>page</code> 和 <code>draft</code>，用户可以在 <code>scaffolds</code> 目录下新建文档来自定义布局格式，还可以修改站点配置文件中的 <code>default_layout</code>参数来指定生成文档时的默认布局。</p><p><img src="http://q2e38owot.bkt.clouddn.com/image/study/hexo1.png" alt="image-20191212151710263"></p><h3 id="文章（post）"><a href="#文章（post）" class="headerlink" title="文章（post）"></a>文章（post）</h3><p>基于 <code>post</code> 布局生成的文档存在于 <code>source\_posts\</code> 目录下，该目录下的文档会作为博客正文显示在网站中。</p><h3 id="页面（page）"><a href="#页面（page）" class="headerlink" title="页面（page）"></a>页面（page）</h3><p><code>page</code> 布局用于生成类似 <strong>首页</strong> 和 <strong>归档</strong> 这样的页面。</p><h3 id="草稿（draft）"><a href="#草稿（draft）" class="headerlink" title="草稿（draft）"></a>草稿（draft）</h3><p><code>draft</code> 布局用于创建草稿，生成的文档存在于 source_drafts\ 目录中，默认配置下将不会把该目录下的文档渲染到网站中。</p><p>通过以下命令将草稿发布为正式文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish &lt;title&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章<br><code>hexo p</code> == <code>hexo publish</code><br><code>hexo g</code> == <code>hexo generate</code>#生成<br><code>hexo s</code> == <code>hexo server</code> #启动服务预览<br><code>hexo d</code> == <code>hexo deploy</code>#部署</p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br><code>hexo server -s</code> #静态模式<br><code>hexo server -p 5000</code> #更改端口<br><code>hexo server -i 192.168.1.1</code> #自定义 IP</p><p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令<br><code>hexo g</code> #生成静态网页<br><code>hexo d</code> #开始部署</p><hr><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>Markdown 并不会保存插入的图片资源本身，只是记录了获取资源的链接。<br>在 Markdown 中插入一张图片的步骤：</p><ol><li>将图片上床到图床上</li><li>获取图片的连接</li><li>插入到 Markdown 中</li></ol><blockquote><p>引用连接:<br><a href="http://yearito.cn/posts/hexo-writing-skills.html" target="_blank" rel="noopener">http://yearito.cn/posts/hexo-writing-skills.html</a><br><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002632530</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo写作命令大全&quot;&gt;&lt;a href=&quot;#Hexo写作命令大全&quot; class=&quot;headerlink&quot; title=&quot;Hexo写作命令大全&quot;&gt;&lt;/a&gt;Hexo写作命令大全&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo常用命令" scheme="http://yoursite.com/tags/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>深入了解JavaScript</title>
    <link href="http://yoursite.com/2019/11/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3javascript/"/>
    <id>http://yoursite.com/2019/11/24/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3javascript/</id>
    <published>2019-11-24T11:28:00.000Z</published>
    <updated>2019-12-12T06:44:05.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS的参数传递"><a href="#JS的参数传递" class="headerlink" title="JS的参数传递"></a>JS的参数传递</h1><h2 id="参数到底如何传递"><a href="#参数到底如何传递" class="headerlink" title="参数到底如何传递"></a>参数到底如何传递</h2><blockquote><p>ECMAScript 中所有函数的参数都是按值传递的</p></blockquote><p>普通类型是按值传递，拷贝原值，引用类型是按共享传递拷贝了引用，都是拷贝值，所以都是按值传递</p><p>这个值如果是简单类型，那么就是其本身。如果是引用类型也就是对象传递就是指向这个对象的地址。故我们可以认为参数全部都是值传递，具体例子：</p><h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    n: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    data = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">foo(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.n) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>传递引用类型传递的是指针。</p><p><img src="https://user-images.githubusercontent.com/15126694/30241403-3fafc13e-95b5-11e7-99f5-1f092c78c48a.png" alt="image"></p><p> 首先执行<code>var obj = {n: 1};</code>，可以看作在栈的011地址中存入了一个指向<code>{n:1}</code>堆的指针*p </p><p><img src="https://camo.githubusercontent.com/e97db40b68c6739348c68215b893e99aa6b044c5/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f392f392f3435333865666535373066656465313233323131653465313334336434326265" alt="img"></p><p> 接下来为声明<code>function foo</code>此时会创建函数执行上下文，产生一个变量对象，其中声明了形参data，由于函数没有执行，当前值为undefined。我们记data地址为022。关于更多变量对象的知识可以参考冴羽老师的这篇<a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">JavaScript深入之变量对象</a>，本文不深入研究关于AO相关，你只需要知道在声明这个函数的时候里面的形参已经被创建出来了。 </p><p><img src="https://camo.githubusercontent.com/74cfb299ca39361602d9887579815203274faa97/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f392f392f6339343533643630346530653536383466646234396363623362363733323733" alt="img"></p><p> 执行<code>foo(obj)</code>其中会进行参数传递，其中将obj中存储的*p拷贝给处在022地址的data，那么此时它们就指向了同一个对象，如果某一个变量更改了n的值，另一个变量中n的值也会更改，因为其中保存的是指针。 </p><p><img src="https://camo.githubusercontent.com/35dc851e4ebcff7f39b5c3c0c646c49c97927473/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f392f392f3932313831323661303734336639646631356566333061366430366663336636" alt="img"></p><p> 进入函数内部，顺序执行<code>data = 2;</code>此时002地址存储了基本类型值，则直接存储在栈中，从而与堆中的{n:1}失去了联系。从而打印<code>console.log(data) // 2</code>，最后发现初始开辟的{n:1}对象没有过更改，故而<code>console.log(obj.n) // 1</code>仍然打印1。 </p><h3 id="第二个例子"><a href="#第二个例子" class="headerlink" title="第二个例子"></a>第二个例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.n); <span class="comment">//1</span></span><br><span class="line">  obj.n=<span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.n) <span class="comment">//2</span></span><br><span class="line">&#125;)(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.n) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p><img src="https://camo.githubusercontent.com/d68b740a7853af8053452f3951e355813c43702c/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f392f31302f3663393932636235653461306239363965353436343531303631306432643032" alt="img"></p><p> 声明函数，虽然同为obj变量名，但是形参obj为AO中的属性，不会与全局造成覆盖，其拥有新的地址记作022，在未执行前其值为undefined。 </p><p> 函数立即执行，此时将全局obj赋值给形参obj，我们忽略这个重复命名的问题，其实就是将011中的 指针*p拷贝了一份给了022。同时执行第一个<code>console.log(obj.n)</code>结果即为1。 </p><p><img src="https://camo.githubusercontent.com/14e00a0a7f9ab9a3ebf2a9e34cc67076052cee9e/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f392f31302f3762616537666632636134393132656530356139663139383762653434656136" alt="img"></p><p> 执行<code>obj.n=3</code>，此时为函数的形参即022中的obj来改变了对象内n的值。 </p><p><img src="https://camo.githubusercontent.com/2e191b1b44a608063fc851841c053aeb42b5b101/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031372f392f31302f3364646364386139666562346364336636663030393033613766656332376264" alt="img"></p><p><strong>最关键的一步</strong>：<code>var obj = {n:2};</code>由于对象命名的关系可能很多童鞋就会有点懵，但依然按照同样的方式来分析即可，由于使用了var那么就是新声明一个对象，从而会在栈中压入新的地址记作033，其中存入了新的指针指向了新的对象{n:2}。从而之后打印的<code>console.log(obj.n)</code>结果则应是新开辟的对象中的n的值。</p><p>最后打印<code>console.log(obj.n) //3</code>很显然，全局的对象有过一次更改其值为3。</p><hr><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>作用域是指程序源代码中定义变量的区域。</p><p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p><h2 id="静态作用域与动态作用域"><a href="#静态作用域与动态作用域" class="headerlink" title="静态作用域与动态作用域"></a>静态作用域与动态作用域</h2><p>JavaScript 采用的词法作用域，也就是静态作用域，函数的作用域在函数定义的时候就决定了。</p><p>而词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果是 1</span></span><br></pre></td></tr></table></figure><p> 主要区别：<strong>词法作用域是在写代码或者定义时确定的，而动态作用域是在运行时确定的（this也是！）。词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用</strong>。 </p><hr><h1 id="Js执行上下文栈"><a href="#Js执行上下文栈" class="headerlink" title="Js执行上下文栈"></a>Js执行上下文栈</h1><blockquote><p> <a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/4</a> </p></blockquote><h2 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h2><p>JavaScript 的可执行代码的类型有三种：</p><ul><li><p>全局代码</p></li><li><p>函数代码</p></li><li><p>eval代码</p><p>举个例子，当执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，让我们用个更专业一点的说法，就叫做”执行上下文(execution context)”。 </p></li></ul><p>当 JavaScript 代码执行一段可执行代码时，会创建对应的执行上下文。</p><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>我们可以把函数的执行过程看做一个执行上下文栈，当函数被创建时就会将函数推入执行上下文栈中，当函数执行完毕后，就将该函数从栈中弹出。</p><hr><h1 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h1><p>每个执行上下文，都有三个重要属性：</p><ul><li>变量对象</li><li>作用域链</li><li>this</li></ul><p>变量对象是与执行上下文相关的数据作用域，存储了上下文定义的变量和函数声明。</p><p>不同上下文的变量对象有所不同，可分为 <strong>全局上下文</strong> 下的变量对象和 <strong>函数上下文</strong> 下的变量对象</p><h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>全局对象：是预定义对象，在顶层 JavaScript 中，可以通过 this 引用全局变量，全局对象时作用域链的头，意味着在顶层 JavaScript 中声明的所有变量都可以成为全局对象的属性。</p><p>1.可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>2.全局对象是由 Object 构造函数实例化的一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure><p>3.预定义了一堆，嗯，一大堆函数和属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都能生效</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.Math.random());</span><br></pre></td></tr></table></figure><p>4.作为全局变量的宿主。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br></pre></td></tr></table></figure><p>5.客户端 JavaScript 中，全局对象有 window 属性指向自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.window.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.b);</span><br></pre></td></tr></table></figure><p>全局上下文中的变量对象就是全局对象！</p><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p> 在函数上下文中，我们活动对象（activation object，AO）来表示变量对象。</p><p>活动对象不可以在 JavaScript 环境中访问，只有当进入一个执行上下文中，这个执行上下文的变量对象才会被激活。而只有被激活的变量对象，也就是活动对象上的属性才能被访问。</p><p>活动对象是进入函数上下文被创建的，它通过函数的 arguments 属性初始化， arguments 属性值是 Arguments 对象。 </p><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>执行上下文的代码会分成两个阶段进行处理：分析和执行，我们也可以叫做：</p><ol><li>进入执行上下文</li><li>代码执行</li></ol><h3 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h3><p>当进入执行上下文时，这时候还没有执行代码，</p><p>变量对象会包括：</p><ol><li>函数的所有形参 (如果是函数上下文)<ul><li>由名称和对应值组成的一个变量对象的属性被创建</li><li>没有实参，属性值设为 undefined</li></ul></li><li>函数声明<ul><li>由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建</li><li>如果变量对象已经存在相同名称的属性，则完全替换这个属性</li></ul></li><li>变量声明<ul><li>由名称和对应值（undefined）组成一个变量对象的属性被创建；</li><li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li></ul></li></ol><p>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo(a) &#123;</span><br><span class="line">  var b = 2;</span><br><span class="line">  function c() &#123;&#125;</span><br><span class="line">  var d = function() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  b = 3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(1);</span><br></pre></td></tr></table></figure><p>在进入执行上下文后，这时候的 AO 是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">    arguments: &#123;</span><br><span class="line">        0: 1,</span><br><span class="line">        length: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    a: 1,</span><br><span class="line">    b: undefined,</span><br><span class="line">    c: reference to function c()&#123;&#125;,</span><br><span class="line">    d: undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><p>在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值</p><p>还是上面的例子，当代码执行完后，这时候的 AO 是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">    arguments: &#123;</span><br><span class="line">        0: 1,</span><br><span class="line">        length: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 3,</span><br><span class="line">    c: reference to function c()&#123;&#125;,</span><br><span class="line">    d: reference to FunctionExpression &quot;d&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里变量对象的创建过程就介绍完了，让我们简洁的总结我们上述所说：</p><ol><li>全局上下文的变量对象初始化是全局对象</li><li>函数上下文的变量对象初始化只包括 Arguments 对象</li><li>在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值</li><li>在代码执行阶段，会再次修改变量对象的属性值</li></ol><p>分析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>打印的是函数，而不是 undefined。</p><p>因为在进入函数上下文时，首先会处理函数声明，其次处理变量声明，如果变量声明名称的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</p><hr><h1 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h1><p>当查找变量的时候，会先从当前上下文的变量对象中进行查找，如果没有，会在父级中的执行上下文的变量对象中查找，还是没有，就一直查找上一级上下文中的变量对象。直到全局上下文中的变量对象。这种由多个执行上下文的对象构成的链就是作用域链。</p><p>用函数的创建和激活理解作用域链：</p><h2 id="函数的创建"><a href="#函数的创建" class="headerlink" title="函数的创建"></a>函数的创建</h2><p>函数作用域在函数被定义时就决定了。</p><p>这是由于函数内部有一个内部属性 <code>[[scope]]</code>，当函数创建的时候，就会保存所有父变量到其中，可以理解 <code>[scope]</code> 就是所有父变量的层级链。但是注意：<code>[[scope]]</code> 并不代表完整的作用域链。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数创建时，各自的[[scope]]为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">bar.[[scope]] = [</span><br><span class="line">    fooContext.AO,</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h2><p>当函数被激活时，进入执行上下文，创建 VO/AO 后，就会将活动对象添加到作用域链的前端。</p><p>这时候执行的作用域链我们命名为 Scope：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scope = [AO].concat([[scope]])</span><br></pre></td></tr></table></figure><p>至此作用域链创建完毕。</p><h1 id="进行梳理"><a href="#进行梳理" class="headerlink" title="进行梳理"></a>进行梳理</h1><p>结合下面例子，梳理前面讲过的执行上下文栈和变量对象，总结一下函数上下文中的作用域链和变量对象的创建过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope2 = <span class="string">'local scope'</span>;</span><br><span class="line">    <span class="keyword">return</span> scope2;</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure><p>执行过程如下：</p><p>1.checkscope 函数被创建，保存作用域链到内部属性[[scope]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscope.[[scope]] = [</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="literal">undefined</span></span><br><span class="line">    &#125;，</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.第三步：将活动对象压入 checkscope 作用域链顶端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        arguments: &#123;</span><br><span class="line">            length: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: undefined</span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        arguments: &#123;</span><br><span class="line">            length: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: &apos;local scope&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>执行函数，才会创建函数的执行上下文</p><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><blockquote><p> <a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/7</a> </p></blockquote><h1 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h1><blockquote><p> <a href="https://github.com/mqyqingfeng/Blog/issues/8" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/8</a> </p></blockquote><h1 id="闭包的问题"><a href="#闭包的问题" class="headerlink" title="闭包的问题"></a>闭包的问题</h1><blockquote><p> <a href="https://github.com/mqyqingfeng/Blog/issues/9" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/9</a> </p></blockquote><p>个人理解：闭包是一个有权访问另一个函数里的变量及方法的函数。</p><p>MND 对闭包的定义：</p><blockquote><p>闭包就是有权访问自由变量的函数。</p><p>自由变量是在函数中使用的，既不是函数的参数也不是函数的局部变量的变量。</p><p>闭包 = 函数 + 函数能够访问的自由变量</p></blockquote><p>举一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>函数 foo 可以访问变量 a，但是变量 a 既不是 foo 函数的参数，也不是局部变量，所以 a 就是自由变量。</p><p>所有的变量和方法都通过作用域保存起来了，即使外面的函数执行完毕被弹出执行上下文栈，内部函数也是可以通过作用域链找到相应的变量和方法。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS的参数传递&quot;&gt;&lt;a href=&quot;#JS的参数传递&quot; class=&quot;headerlink&quot; title=&quot;JS的参数传递&quot;&gt;&lt;/a&gt;JS的参数传递&lt;/h1&gt;&lt;h2 id=&quot;参数到底如何传递&quot;&gt;&lt;a href=&quot;#参数到底如何传递&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>第三次周总结</title>
    <link href="http://yoursite.com/2019/11/10/%E5%91%A8%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/10/%E5%91%A8%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%91%A8%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-10T12:28:00.000Z</published>
    <updated>2019-12-10T12:46:31.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h2 id="Prototype"><a href="#Prototype" class="headerlink" title="[[Prototype]]"></a>[[Prototype]]</h2><p>JavaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，就是对象的引用。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。</p><h3 id="Prototype-引用的用处"><a href="#Prototype-引用的用处" class="headerlink" title="[[Prototype]] 引用的用处"></a>[[Prototype]] 引用的用处</h3><p>当你试图引用对象的属性时会触发 [[Get]] 操作，比如 对象名.属性名。第一步是检查对象是否有这个 属性，如果有就是用它。如果没有，就需要使用对象的 [[Prototype]] 链了。</p><h3 id="Object-create-…-的原理"><a href="#Object-create-…-的原理" class="headerlink" title="Object.create(…)的原理"></a>Object.create(…)的原理</h3><p>创建一个对象并把这个对象的 [[Prototype]] 关联到指定的对象</p><h3 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a>Object.prototype</h3><p>因为通过各种语法进行属性的查找时，都会查找 [[Prototype]] 链，直到找到属性或者查找完整条原型链。</p><p>所以哪里是 [[Prototype]] 的尽头呢？</p><p>所有普通的 [[Prototype]]链最终都会指向内置的 Object.Prototype。由于所有普通对象都源于这个 Object.prototype 对象，所以它包含 JavaScript 中许多通用的功能。</p><h2 id="“类”"><a href="#“类”" class="headerlink" title="“类”"></a>“类”</h2><p>一个对象关于另一个对象</p><p>JavaScript和面向类的语言不同，JavaScript只有对象。它是可以不通过类，直接创建对象的语言。</p><h3 id="“类”函数"><a href="#“类”函数" class="headerlink" title="“类”函数"></a>“类”函数</h3><p>Js一直是在模仿类，这种”类似类”的行为利用了函数的一种特殊特性：所有的函数默认都会拥有一个名为 property 的公有并且不可枚举的属性，它指向另一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype</span><br></pre></td></tr></table></figure><p>这个对象通常被称为 Foo 的原型，因为通过名为 Foo.prototype 的属性引用来访问它。“被贴上 Foo.prototype 标签的对象”。</p><p>面向类语言，类是可以被复制（实例化）多次，但是在 JavaScript中，并没有类似的复制机制。不能创建一个类的多个实例，只能创建多个对象，它们 [[property]] <strong>关联</strong>的是同一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a) === Foo.prototype; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>new Foo() 会生成一个新对象（我们称之为a)，这个新对象的内部链接 [[Prototype]] 关联的是 Foo.prototype 对象。最后我们得到的两个对象，它们之间互相关联。我们并没有初始化一个类，实际上我们并没有从“类”中复制任何行为到另一个对象中，只是让两个对象互相关联。</p><p>new Foo()只是间接完成了我们的目标：一个关联到其他对象的新对象。</p><h4 id="关于名称"><a href="#关于名称" class="headerlink" title="关于名称"></a>关于名称</h4><p>在JavaScript中，我们并不会将一个对象（“类”）复制到另一个对象（“实例”），只是将它们关联起来。[[Prototype]] 机制如下图所示：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191107103923655.png" alt="image-20191107103923655"></p><p>这个机制被称为<strong>原型继承</strong></p><p>对象（实例）a1 到 Foo.prototype 的委托关系，还展示出 Bar.prototype 到 Foo.prototype 的委托关系，而后者和类继承很类似，只有箭头的方向不同。图中由下到上的箭头表明这是委托关联，不是复制操作。</p><h3 id="“构造函数”"><a href="#“构造函数”" class="headerlink" title="“构造函数”"></a>“构造函数”</h3><p>到底是什么原因让我们认为 Foo 是一个 “类” 呢？</p><p>一个原因是使用了关键字 new ，在面向类的语言中构造类函数实例时会用到它。另一个原因是，看起来我们执行了类的构造函数方法，Foo()的调用方式很想初始化类时类构造函数的调用方式。</p><p>还有另一个原因:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.constructor === Foo;  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line">a.constructor === Foo;  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Foo.prototype 默认（在代码第一行声明中）有一个公有并且不可枚举的属性 .constructor，这个属性引用的是对象关联的函数（本例中是 Foo）。此外，可以看到通过 “构造函数” 调用 new Foo() 创建的对象也有一个 .constructor 属性，指向 “创建这个对象的函数” 。</p><h4 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h4><p>上面 Foo 和你程序中的其他函数没有任何区别。函数本身并不是构造函数，然而，当你在普通函数调用前面加上 new 关键字之后，就会把这个函数调用变成一个 “构造函数调用”。实际上，new 会劫持所有普通函数并用构造对象的形式来调用它。</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NothingSpecial</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Don't mind me!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> NothingSpecial();</span><br><span class="line"><span class="comment">//  "Don't mind me!"</span></span><br><span class="line"></span><br><span class="line">a; <span class="comment">//&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>NothingSpecial 只是一个普通的函数，但是使用 new 调用时，它就会构造一个对象并赋值给 a，这看起来像是 new 的一个副作用（无论如何都会构造一个对象）。这个调用是一个构造函数调用，但是 NothingSpecial 本身并不是一个构造函数。</p><p>在 JavaScript 中对于 “构造函数” 最准确的解释是，所有带 new 的函数调用。函数不是构造函数，但是当且仅当使用 new 时，函数调用会变成 “构造函数调用”。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p>参见 p151 页</p><p>JavaScript中的.constructor</p><hr><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>原型风格：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.myName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">name, label</span>) </span>&#123;</span><br><span class="line">    Foo.call(<span class="keyword">this</span>, name)</span><br><span class="line">    <span class="keyword">this</span>.label = label</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建了一个新的 Bar.prototype 对象并关联到 Foo.prototype</span></span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create(Foo.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，现在没有 Bar.prototype.constructor</span></span><br><span class="line"><span class="comment">// 如果你需要这个属性的话可能需要手动修复一下它</span></span><br><span class="line"></span><br><span class="line">Bar.prototype.myLabel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.label</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Bar(<span class="string">"a"</span>, <span class="string">"obj a"</span>)</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Foo(<span class="string">"b"</span>, <span class="string">"obj b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.myName()); <span class="comment">//a</span></span><br><span class="line"><span class="built_in">console</span>.log(a.myLabel()); <span class="comment">//obj a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.myName()); <span class="comment">//b</span></span><br><span class="line"><span class="comment">//console.log(b.myLabel()); //b.myLabel is not a function</span></span><br></pre></td></tr></table></figure><p>调用 Object.create(..) 会凭空创建一个”新”对象并把新对象内部的 [[Prototype]] 关联到你指定的对象（本例中 Foo.prototype）。换句话说：“创建一个新的 Bar.prototype 对象并把它关联到 Foo.prototype”。</p><p>声明 function Bar(){..} 时，和其他函数一样，Bar 会有一个 .prototype 关联到默认的对象，但是这个对象并不是我们想要的 Foo.prototype。因此我们创建一个新对象并把它关联到我们希望的对象上，直接把原始的关联对象抛弃掉。</p><p>ES6 添加了辅助函数 Object.setPrototypeOf(..)，可以用标准并且可靠的方法修改关联。<br>Object.setPrototypeOf(Bar.prototype，Foo.prototype)</p><h2 id="对象关联"><a href="#对象关联" class="headerlink" title="对象关联"></a>对象关联</h2><p>[[Prototype]] 机制是存在于对象的一个内部链接，它会引用其他对象。</p><p>通常来说，这个链接的作用是：如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在 [[Prototype]] 关联的对象上进行查找。同理，如果后者中也没有找到需要的引用就会继续查找它的 [[Prototype]]，以此类推。这一系列对象的连接被称为“原型链”。</p><h2 id="原型链图："><a href="#原型链图：" class="headerlink" title="原型链图："></a>原型链图：</h2><img src="https://zacharykwan.com/uploads/prototype/prototype.jpg" alt="“复杂的原型链图”的图片搜索结果" style="zoom: 50%;" /><h1 id="浏览器与Node的事件循环"><a href="#浏览器与Node的事件循环" class="headerlink" title="浏览器与Node的事件循环"></a>浏览器与Node的事件循环</h1><h2 id="浏览器与Node的事件循环-Event-Loop-有何区别"><a href="#浏览器与Node的事件循环-Event-Loop-有何区别" class="headerlink" title="浏览器与Node的事件循环(Event Loop)有何区别?"></a>浏览器与Node的事件循环(Event Loop)有何区别?</h2><blockquote><p> <a href="https://juejin.im/post/5c337ae06fb9a049bc4cd218" target="_blank" rel="noopener">https://juejin.im/post/5c337ae06fb9a049bc4cd218</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h1&gt;&lt;h2 id=&quot;Prototype&quot;&gt;&lt;a href=&quot;#Prototype&quot; class=&quot;headerlink&quot; title=&quot;[[Proto
      
    
    </summary>
    
    
      <category term="周总结" scheme="http://yoursite.com/categories/%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="周总结" scheme="http://yoursite.com/tags/%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>第二次周总结</title>
    <link href="http://yoursite.com/2019/11/03/%E5%91%A8%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/03/%E5%91%A8%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%91%A8%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-03T11:00:00.000Z</published>
    <updated>2019-12-10T12:27:22.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS的执行机制"><a href="#JS的执行机制" class="headerlink" title="JS的执行机制"></a>JS的执行机制</h1><h2 id="关于JavaScript"><a href="#关于JavaScript" class="headerlink" title="关于JavaScript"></a>关于JavaScript</h2><p>JavaScript是一门单线程语言，所有一切 JavaScript 多线程都是用但线程模拟出来的</p><h2 id="JavaScript事件循环"><a href="#JavaScript事件循环" class="headerlink" title="JavaScript事件循环"></a>JavaScript事件循环</h2><ul><li>同步任务进入主线程</li><li>异步任务进入Event Table</li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/21/15fdd88994142347?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>主线程执行完后，发现执行栈为空，就会去Event Queue中去取相应的函数。</p><p>事件循环的顺序，决定 js 代码的执行顺序。进入整体代码（宏任务）后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有微任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'then'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'console'</span>);复制代码</span><br></pre></td></tr></table></figure><ul><li>这段代码作为宏任务，进入主线程。</li><li>先遇到<code>setTimeout</code>，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li><li>接下来遇到了<code>Promise</code>，<code>new Promise</code>立即执行，<code>then</code>函数分发到微任务Event Queue。</li><li>遇到<code>console.log()</code>，立即执行。</li><li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了<code>then</code>在微任务Event Queue里面，执行。</li><li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中<code>setTimeout</code>对应的回调函数，立即执行。</li><li>结束。</li></ul><h2 id="宏任务、微任务与Event-Loop"><a href="#宏任务、微任务与Event-Loop" class="headerlink" title="宏任务、微任务与Event Loop"></a>宏任务、微任务与Event Loop</h2><p>JavaScript中执行的过程可以看成宏任务和微任务的执行，由于单线程的工作原理，js会一步一步的执行代码，这是第一个整体代码（宏任务），也就是主线程，如果遇到一些回调函数就会注册分发到宏任务 Event Queue（任务队列）中，继续执行，当遇到微任务时，也分发到任务队列中，待第一个宏任务执行完毕后，在执行此次的微任务，然后通过 Event Loop 执行下一个宏任务（刚刚在第一次宏任务中注册的回调函数），以此类推。直到循环结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'10'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS的执行机制&quot;&gt;&lt;a href=&quot;#JS的执行机制&quot; class=&quot;headerlink&quot; title=&quot;JS的执行机制&quot;&gt;&lt;/a&gt;JS的执行机制&lt;/h1&gt;&lt;h2 id=&quot;关于JavaScript&quot;&gt;&lt;a href=&quot;#关于JavaScript&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="周总结" scheme="http://yoursite.com/categories/%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="周总结" scheme="http://yoursite.com/tags/%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>第一次周总结</title>
    <link href="http://yoursite.com/2019/10/27/%E5%91%A8%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/10/27/%E5%91%A8%E6%80%BB%E7%BB%93/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%91%A8%E6%80%BB%E7%BB%93/</id>
    <published>2019-10-27T11:00:00.000Z</published>
    <updated>2020-01-17T08:23:01.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS对象序列化详解"><a href="#JS对象序列化详解" class="headerlink" title="JS对象序列化详解"></a>JS对象序列化详解</h2><h3 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h3><p>对象序列化是将对象状态转化成一个字符串</p><p>序列化是将对象的状态信息转换成一个可以存储和传输的形式的过程</p><h3 id="为什么会有对象序列化"><a href="#为什么会有对象序列化" class="headerlink" title="为什么会有对象序列化"></a>为什么会有对象序列化</h3><p>简单的说就是方便对象<strong>传输和存储</strong></p><blockquote><p>当这句代码运行时，对象obj的内容会存储在一块内存中，而obj本身存储的只是这块内存的地址的映射而已。简单的说，对象obj就是我们的程序在电脑通电时在内存中维护的一种东西，如果我们程序停止了或者电脑断电了，对象obj将不复存在。那么如何把对象obj的内容保存在磁盘上呢（也就是说在没电时继续保留着）？这时就需要把对象obj序列化，也就是说把obj的内容转换成一个字符串的形式，然后再保存在磁盘上。另外，我们又怎么通过HTTP协议把对象obj的内容发送到客户端呢？没错，还是需要先把对象obj序列化，然后客户端根据接收到的字符串再反序列化（也就是将字符串还原为对象）解析出相应的对象。</p></blockquote><h3 id="JS中的对象序列化"><a href="#JS中的对象序列化" class="headerlink" title="JS中的对象序列化"></a>JS中的对象序列化</h3><p> JSON 的全称是”JavaScript Object Notation“——JavaScript对象表示法。ECMAScript 5中提供了内置函数JSON.stringify()和JSON.parse()用来序列化和还原JavaScript对象。<br> JSON是一种语法，用来序列化字符串，数值，数组，对象，布尔值和null</p><hr><h2 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h2><blockquote><p>你不知道的js上</p></blockquote><h3 id="为什么要用this"><a href="#为什么要用this" class="headerlink" title="为什么要用this"></a>为什么要用this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">"Hello,I'm "</span> + identify.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(greeting)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me =&#123;</span><br><span class="line">  name:<span class="string">'Kele'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> you =&#123;</span><br><span class="line">  name:<span class="string">'Reader'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">identify.call(me)</span><br><span class="line">identify.call(you)</span><br><span class="line"></span><br><span class="line">speak.call(me)</span><br><span class="line">speak.call(you)</span><br></pre></td></tr></table></figure><p>在不同的上下文对象中，重复使用函数的情况下，使用this就不用针对每个对象编写不同版本的函数，如上面代码如果不使用this，则需显示的传入一个上下文对象。</p><h3 id="对this常见的两种误解"><a href="#对this常见的两种误解" class="headerlink" title="对this常见的两种误解"></a>对this常见的两种误解</h3><ol><li><p>指向自身<br>从函数对象内部引用它自身 ，只使用this是不够的。<br>一般来说需通过一个指向函数对象的此法标识符（变量）来引用它:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>)</span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"foo:"</span>+num)</span><br><span class="line">  <span class="comment">// 记录foo被调用的次数,foo代替this来引用函数对象</span></span><br><span class="line">  foo.count++</span><br><span class="line">&#125;</span><br><span class="line">foo.count=<span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&gt;<span class="number">5</span>)&#123;</span><br><span class="line">    foo(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo被调用几次</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.count);</span><br></pre></td></tr></table></figure><p>回避了this问题，完全依赖于变量foo的词法作用域</p><p>另一种方法是强制this指向foo函数对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"foo:"</span>+num)</span><br><span class="line">  <span class="comment">// 记录foo被调用的次数</span></span><br><span class="line">  <span class="keyword">this</span>.count++</span><br><span class="line">&#125;</span><br><span class="line">foo.count=<span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&gt;<span class="number">5</span>)&#123;</span><br><span class="line">    foo.call(foo,i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo被调用几次</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.count);</span><br></pre></td></tr></table></figure></li><li><p>它的作用域</p></li></ol><h4 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h4><p>通过对象访问属性的方式调用函数，this就指向这个对象；其他情况，在严格模式下，指向undefined，在非严格模式下指向全局对象。</p><p><strong>总结</strong>：this是在运行时绑定的而不是在编写时绑定，它的上下文取决于函数调用时的条件。this实际是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里调用。</p><h3 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h3><p>理解调用位置分析调用栈，调用位置就在当前执行的函数的前一个调用中</p><p>四条绑定规则：</p><ul><li>默认调用</li><li>隐式调用</li><li>显示调用<ul><li>call（）和apply（）方法</li></ul></li><li>new绑定<ul><li>首先理解new的机制和面向类的语言完全不同，js中的构造函数只是一些使用new操作符时被调用的函数。并不属于某个类，也不会实例一个类，只是一个普通函数</li></ul></li></ul><h3 id="判断this"><a href="#判断this" class="headerlink" title="判断this"></a>判断this</h3><p>判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序判断：</p><ol><li>函数是否在 new 中调用？如果是的话 this 绑定的是新创建的对象</li><li>函数是否通过call、apply或者硬绑定？如果是，this 绑定的是指定的对象</li><li>函数是否在某个上下文对象中调用？this绑定的是那个上下文对象</li><li>如果都不是，使用默认绑定</li></ol><h3 id="this词法"><a href="#this词法" class="headerlink" title="this词法"></a>this词法</h3><p>ES6中有一种无法使用这些规则的特殊函数类型：箭头函数</p><p>箭头函数的绑定，无法被修改常用于回调函数</p><hr><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>对象可以通过两种方式定义：声明（文字）形式和构造形式</p><p>两种定义出来的对象是一样的<strong>区别</strong>在于：声明方式可以在文字声明中添加多个键值对，但是构造形式只能逐个添加属性</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>对象是 JavaScript 的基础。有六种主要类型（语言类型）</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>null</li><li>undefined</li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JavaScript 中还有一些对象子类型，通常被称为内置对象。</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Object</li><li>Function</li><li>Array</li><li>Date</li><li>RegExp</li><li>Error  </li></ul><p>思考下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"I'm a string"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">//13</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">3</span>)) <span class="comment">//m</span></span><br></pre></td></tr></table></figure><p>我们可以直接在字符串字面量上访问属性或者方法，是因为引擎自动把字面量转换成 String 对象，所以才可以访问属性和方法。</p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>对象的内容是由一些存储在特定命名位置的（任意类型的）值组成的，我们称之为属性。</p><p>这些值存储方式多钟多样，一般并不会存储在对象容器内部。存储在内部的是这些属性的名称，它们就像指针（引用）一样，指向这些值真正的存储位置。</p><p>.属性访问，[]键访问</p><h4 id="属性与方法"><a href="#属性与方法" class="headerlink" title="属性与方法"></a>属性与方法</h4><p>在JavaScript中，函数并不是方法，函数和方法在JavaScript中是可以互换的。</p><p>即使在对象的文字形式中声明一个函数表达式，这个函数也不会属于这个对象，他们只是对于相同函数对象的多个引用。</p><h4 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h4><p>ES5后，所有属性都具备了属性描述符，属性的特性可以通过属性描述符来控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  a:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(myObject,<span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(myObject,<span class="string">"a"</span>));</span><br><span class="line">&#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,   <span class="comment">//可写</span></span><br><span class="line">    enumerable: <span class="literal">true</span>,   <span class="comment">//可枚举</span></span><br><span class="line">    configurable: <span class="literal">true</span>  <span class="comment">//可配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，可以使用Object.preventExtensions(…)，Object.seal(…)，Object.freeze(…) 来设置对象（及其属性）的不可变性级别。</p><p>在创建普通属性时属性描述符会使用默认值，可以使用Object.definePropertty(…)来添加一个新属性或者修改一个已有属性（如果它是configurable）并对特性进行设置。</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(myObject,<span class="string">"a"</span>,&#123;</span><br><span class="line">  value:<span class="number">2</span>,</span><br><span class="line">  writable:<span class="literal">true</span>,</span><br><span class="line">  configurable:<span class="literal">true</span>,</span><br><span class="line">  enumerable:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">myObject.a  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4 id="Get"><a href="#Get" class="headerlink" title="[Get]"></a>[Get]</h4><p>对象默认的内置 [[Get]] 操作首先在对象中查找是否有名称相同的属性。如果找到就返回这个属性的值，否则就遍历可能存在的 [[Prototype]] 链，也就是原型链。如若还没找到，返回 undefined</p><h4 id="Put"><a href="#Put" class="headerlink" title="[[Put]]"></a>[[Put]]</h4><p>[[Put]] 被触发时，实际的行为取决于许多因素，包括对象中是否已经存在这个属性（重要因素）</p><p>如果已经<strong>存在</strong>这个属性，[[put]] 算法大致会检查下面这些内容：</p><ol><li>属性是否是访问描述符（参见Getter和Setter）?如果是并且存在 setter 就调用 setter</li><li>属性的数据描述符中 writable 是否是 false？如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常</li><li>如果不是，将该值设置为属性的值</li></ol><p>如果对象中<strong>不存在</strong>这个属性，[[Put]]操作会更加复杂。参见 [[Prototype]]</p><h4 id="Getter和Setter"><a href="#Getter和Setter" class="headerlink" title="Getter和Setter"></a>Getter和Setter</h4><p>ES5中可以使用 getter 和 setter 部分改写默认操作，但只能应用在单个属性上，无法应用到整个对象。它们都是隐藏函数，getter 获取属性值时调用，setter 在设置属性值时调用。</p><p>JavaScript 会忽略它们的 value 和 writable ，只关心 set 和 get（还有configurable和enumerable）特性。</p><p>为了让属性更合理，getter 和 setter 是成对出现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="comment">// 给 a 定义一个 getter</span></span><br><span class="line">  <span class="keyword">get</span> a()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._a_</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 给 a 定义一个 setter</span></span><br><span class="line">  <span class="keyword">set</span> a(val)&#123;</span><br><span class="line">    <span class="keyword">this</span>._a_ = val*<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myObject.a); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="存在性"><a href="#存在性" class="headerlink" title="存在性"></a>存在性</h4><p>in 和 hasOwnProperty区别在于是否查找 [[Prototype]] 链</p><p>in 会检查是否在对象及其 [[Prototype]] 原型链中</p><p>in 检查的是某个属性名是否存在</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>for…in 循环可以遍历对象的可枚举属性列表（[[Prototype]]链）。使用它遍历对象是无法直接获取属性值，只是遍历对象中的可枚举属性，需要手动获取属性值。</p><p>ES5数组辅助迭代器，接收一个回调函数并应用到数组的每个元素上，区别是对于回调函数的返回值的处理方式不同：</p><ul><li>forEach(…)会遍历数组中的所有值并忽略回调函数的返回值</li><li>every(…)会一直运行直到回调函数返回false（或假值）</li><li>some(…)会一直运行直到回调函数返回true（或真值）</li></ul><p>every 和 some 中特殊的返回值和普通函数 for 循环中的 break 语句类似，会提前终止遍历</p><p>ES6增加了一种用来遍历数组的 for…of 循环语句，直接遍历值而不是数组下标</p><p>for…of 循环首先会向被访问的对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。细节请见数组内置的 @@iterator 来手动遍历数组是怎么工作的。</p><p>和数组不同，普通对象没有内置的 @@iterator，所有无法完成 for…of 遍历。</p><h2 id="RSA非对称加密"><a href="#RSA非对称加密" class="headerlink" title="RSA非对称加密"></a>RSA非对称加密</h2><p>RSA 不需要双方协商一个保密的密钥，而是有一对钥匙，一个是保密的，成为私钥；另一个是公开的，称为公钥。</p><p>用私钥加密的数据，只有对应的公钥才能解密；用公钥加密的数据，只有对应的私钥才能解密。</p><p>但由于RSA算法的加密和解密速度有点慢，先用 RSA 的方式将对称加密算法的密钥发给对方，随后利用对称密钥通信。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS对象序列化详解&quot;&gt;&lt;a href=&quot;#JS对象序列化详解&quot; class=&quot;headerlink&quot; title=&quot;JS对象序列化详解&quot;&gt;&lt;/a&gt;JS对象序列化详解&lt;/h2&gt;&lt;h3 id=&quot;什么是序列化&quot;&gt;&lt;a href=&quot;#什么是序列化&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="周总结" scheme="http://yoursite.com/categories/%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="周总结" scheme="http://yoursite.com/tags/%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
      <category term="this指向" scheme="http://yoursite.com/tags/this%E6%8C%87%E5%90%91/"/>
    
  </entry>
  
</feed>
